
VL53L1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800544c  0800544c  0000644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005694  08005694  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005694  08005694  00006694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800569c  0800569c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800569c  0800569c  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056a0  080056a0  000066a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080056a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000818  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000874  20000874  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cca2  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000201e  00000000  00000000  00013d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  00015d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cb  00000000  00000000  00016878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f558  00000000  00000000  00017143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010103  00000000  00000000  0003669b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bad2c  00000000  00000000  0004679e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001014ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000338c  00000000  00000000  00101510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0010489c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005434 	.word	0x08005434

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005434 	.word	0x08005434

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000d5e:	232d      	movs	r3, #45	@ 0x2d
 8000d60:	73bb      	strb	r3, [r7, #14]
 8000d62:	e011      	b.n	8000d88 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	b299      	uxth	r1, r3
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	3b2d      	subs	r3, #45	@ 0x2d
 8000d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e20 <VL53L1X_SensorInit+0xd4>)
 8000d6e:	5cd2      	ldrb	r2, [r2, r3]
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 f8b0 	bl	8001ed8 <VL53L1_WrByte>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	3301      	adds	r3, #1
 8000d86:	73bb      	strb	r3, [r7, #14]
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	2b87      	cmp	r3, #135	@ 0x87
 8000d8c:	d9ea      	bls.n	8000d64 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 f889 	bl	8000ea8 <VL53L1X_StartRanging>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8000da4:	e00b      	b.n	8000dbe <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8000da6:	f107 020d 	add.w	r2, r7, #13
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f8aa 	bl	8000f08 <VL53L1X_CheckForDataReady>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8000dbe:	7b7b      	ldrb	r3, [r7, #13]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f0      	beq.n	8000da6 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f82c 	bl	8000e24 <VL53L1X_ClearInterrupt>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f87d 	bl	8000ed8 <VL53L1X_StopRanging>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	2209      	movs	r2, #9
 8000dec:	2108      	movs	r1, #8
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 f872 	bl	8001ed8 <VL53L1_WrByte>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	2200      	movs	r2, #0
 8000e02:	210b      	movs	r1, #11
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 f867 	bl	8001ed8 <VL53L1_WrByte>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	73fb      	strb	r3, [r7, #15]
	return status;
 8000e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	080055d4 	.word	0x080055d4

08000e24 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	2201      	movs	r2, #1
 8000e36:	2186      	movs	r1, #134	@ 0x86
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 f84d 	bl	8001ed8 <VL53L1_WrByte>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	73fb      	strb	r3, [r7, #15]
	return status;
 8000e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8000e64:	f107 020e 	add.w	r2, r7, #14
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	2130      	movs	r1, #48	@ 0x30
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 ff7b 	bl	8001d68 <VL53L1_RdByte>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	bf0c      	ite	eq
 8000e90:	2301      	moveq	r3, #1
 8000e92:	2300      	movne	r3, #0
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	701a      	strb	r2, [r3, #0]
	return status;
 8000e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	2240      	movs	r2, #64	@ 0x40
 8000eba:	2187      	movs	r1, #135	@ 0x87
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 f80b 	bl	8001ed8 <VL53L1_WrByte>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	73fb      	strb	r3, [r7, #15]
	return status;
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2187      	movs	r1, #135	@ 0x87
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fff3 	bl	8001ed8 <VL53L1_WrByte>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	73fb      	strb	r3, [r7, #15]
	return status;
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000f18:	f107 020d 	add.w	r2, r7, #13
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff97 	bl	8000e54 <VL53L1X_GetInterruptPolarity>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000f30:	f107 020e 	add.w	r2, r7, #14
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	2131      	movs	r1, #49	@ 0x31
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 ff15 	bl	8001d68 <VL53L1_RdByte>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10c      	bne.n	8000f6a <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8000f50:	7bbb      	ldrb	r3, [r7, #14]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	7b7a      	ldrb	r2, [r7, #13]
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d103      	bne.n	8000f64 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	e002      	b.n	8000f6a <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460a      	mov	r2, r1
 8000f80:	80fb      	strh	r3, [r7, #6]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8000f8a:	f107 020c 	add.w	r2, r7, #12
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fa2a 	bl	80013ec <VL53L1X_GetDistanceMode>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 8000fa2:	89bb      	ldrh	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <VL53L1X_SetTimingBudgetInMs+0x36>
		return 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e0f6      	b.n	800119a <VL53L1X_SetTimingBudgetInMs+0x224>
	else if (DM == 1) {	/* Short DistanceMode */
 8000fac:	89bb      	ldrh	r3, [r7, #12]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	f040 8082 	bne.w	80010b8 <VL53L1X_SetTimingBudgetInMs+0x142>
		switch (TimingBudgetInMs) {
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fba:	d06b      	beq.n	8001094 <VL53L1X_SetTimingBudgetInMs+0x11e>
 8000fbc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fc0:	dc77      	bgt.n	80010b2 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000fc2:	2bc8      	cmp	r3, #200	@ 0xc8
 8000fc4:	d057      	beq.n	8001076 <VL53L1X_SetTimingBudgetInMs+0x100>
 8000fc6:	2bc8      	cmp	r3, #200	@ 0xc8
 8000fc8:	dc73      	bgt.n	80010b2 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000fca:	2b64      	cmp	r3, #100	@ 0x64
 8000fcc:	d044      	beq.n	8001058 <VL53L1X_SetTimingBudgetInMs+0xe2>
 8000fce:	2b64      	cmp	r3, #100	@ 0x64
 8000fd0:	dc6f      	bgt.n	80010b2 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000fd2:	2b32      	cmp	r3, #50	@ 0x32
 8000fd4:	d031      	beq.n	800103a <VL53L1X_SetTimingBudgetInMs+0xc4>
 8000fd6:	2b32      	cmp	r3, #50	@ 0x32
 8000fd8:	dc6b      	bgt.n	80010b2 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000fda:	2b21      	cmp	r3, #33	@ 0x21
 8000fdc:	d020      	beq.n	8001020 <VL53L1X_SetTimingBudgetInMs+0xaa>
 8000fde:	2b21      	cmp	r3, #33	@ 0x21
 8000fe0:	dc67      	bgt.n	80010b2 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	d002      	beq.n	8000fec <VL53L1X_SetTimingBudgetInMs+0x76>
 8000fe6:	2b14      	cmp	r3, #20
 8000fe8:	d00d      	beq.n	8001006 <VL53L1X_SetTimingBudgetInMs+0x90>
 8000fea:	e062      	b.n	80010b2 <VL53L1X_SetTimingBudgetInMs+0x13c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	221d      	movs	r2, #29
 8000ff0:	215e      	movs	r1, #94	@ 0x5e
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 ff92 	bl	8001f1c <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	2227      	movs	r2, #39	@ 0x27
 8000ffc:	2161      	movs	r1, #97	@ 0x61
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 ff8c 	bl	8001f1c <VL53L1_WrWord>
					0x0027);
			break;
 8001004:	e0c7      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	2251      	movs	r2, #81	@ 0x51
 800100a:	215e      	movs	r1, #94	@ 0x5e
 800100c:	4618      	mov	r0, r3
 800100e:	f000 ff85 	bl	8001f1c <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	226e      	movs	r2, #110	@ 0x6e
 8001016:	2161      	movs	r1, #97	@ 0x61
 8001018:	4618      	mov	r0, r3
 800101a:	f000 ff7f 	bl	8001f1c <VL53L1_WrWord>
					0x006E);
			break;
 800101e:	e0ba      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	22d6      	movs	r2, #214	@ 0xd6
 8001024:	215e      	movs	r1, #94	@ 0x5e
 8001026:	4618      	mov	r0, r3
 8001028:	f000 ff78 	bl	8001f1c <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	226e      	movs	r2, #110	@ 0x6e
 8001030:	2161      	movs	r1, #97	@ 0x61
 8001032:	4618      	mov	r0, r3
 8001034:	f000 ff72 	bl	8001f1c <VL53L1_WrWord>
					0x006E);
			break;
 8001038:	e0ad      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8001040:	215e      	movs	r1, #94	@ 0x5e
 8001042:	4618      	mov	r0, r3
 8001044:	f000 ff6a 	bl	8001f1c <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800104e:	2161      	movs	r1, #97	@ 0x61
 8001050:	4618      	mov	r0, r3
 8001052:	f000 ff63 	bl	8001f1c <VL53L1_WrWord>
					0x01E8);
			break;
 8001056:	e09e      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800105e:	215e      	movs	r1, #94	@ 0x5e
 8001060:	4618      	mov	r0, r3
 8001062:	f000 ff5b 	bl	8001f1c <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800106c:	2161      	movs	r1, #97	@ 0x61
 800106e:	4618      	mov	r0, r3
 8001070:	f000 ff54 	bl	8001f1c <VL53L1_WrWord>
					0x0388);
			break;
 8001074:	e08f      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800107c:	215e      	movs	r1, #94	@ 0x5e
 800107e:	4618      	mov	r0, r3
 8001080:	f000 ff4c 	bl	8001f1c <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	f240 4296 	movw	r2, #1174	@ 0x496
 800108a:	2161      	movs	r1, #97	@ 0x61
 800108c:	4618      	mov	r0, r3
 800108e:	f000 ff45 	bl	8001f1c <VL53L1_WrWord>
					0x0496);
			break;
 8001092:	e080      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	f240 5291 	movw	r2, #1425	@ 0x591
 800109a:	215e      	movs	r1, #94	@ 0x5e
 800109c:	4618      	mov	r0, r3
 800109e:	f000 ff3d 	bl	8001f1c <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 80010a8:	2161      	movs	r1, #97	@ 0x61
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 ff36 	bl	8001f1c <VL53L1_WrWord>
					0x05C1);
			break;
 80010b0:	e071      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
			break;
 80010b6:	e06e      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		}
	} else {
		switch (TimingBudgetInMs) {
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010be:	d058      	beq.n	8001172 <VL53L1X_SetTimingBudgetInMs+0x1fc>
 80010c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010c4:	dc64      	bgt.n	8001190 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80010c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80010c8:	d044      	beq.n	8001154 <VL53L1X_SetTimingBudgetInMs+0x1de>
 80010ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80010cc:	dc60      	bgt.n	8001190 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80010ce:	2b64      	cmp	r3, #100	@ 0x64
 80010d0:	d031      	beq.n	8001136 <VL53L1X_SetTimingBudgetInMs+0x1c0>
 80010d2:	2b64      	cmp	r3, #100	@ 0x64
 80010d4:	dc5c      	bgt.n	8001190 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80010d6:	2b32      	cmp	r3, #50	@ 0x32
 80010d8:	d020      	beq.n	800111c <VL53L1X_SetTimingBudgetInMs+0x1a6>
 80010da:	2b32      	cmp	r3, #50	@ 0x32
 80010dc:	dc58      	bgt.n	8001190 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80010de:	2b14      	cmp	r3, #20
 80010e0:	d002      	beq.n	80010e8 <VL53L1X_SetTimingBudgetInMs+0x172>
 80010e2:	2b21      	cmp	r3, #33	@ 0x21
 80010e4:	d00d      	beq.n	8001102 <VL53L1X_SetTimingBudgetInMs+0x18c>
 80010e6:	e053      	b.n	8001190 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	221e      	movs	r2, #30
 80010ec:	215e      	movs	r1, #94	@ 0x5e
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 ff14 	bl	8001f1c <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	2222      	movs	r2, #34	@ 0x22
 80010f8:	2161      	movs	r1, #97	@ 0x61
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 ff0e 	bl	8001f1c <VL53L1_WrWord>
					0x0022);
			break;
 8001100:	e049      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	2260      	movs	r2, #96	@ 0x60
 8001106:	215e      	movs	r1, #94	@ 0x5e
 8001108:	4618      	mov	r0, r3
 800110a:	f000 ff07 	bl	8001f1c <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	226e      	movs	r2, #110	@ 0x6e
 8001112:	2161      	movs	r1, #97	@ 0x61
 8001114:	4618      	mov	r0, r3
 8001116:	f000 ff01 	bl	8001f1c <VL53L1_WrWord>
					0x006E);
			break;
 800111a:	e03c      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	22ad      	movs	r2, #173	@ 0xad
 8001120:	215e      	movs	r1, #94	@ 0x5e
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fefa 	bl	8001f1c <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	22c6      	movs	r2, #198	@ 0xc6
 800112c:	2161      	movs	r1, #97	@ 0x61
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fef4 	bl	8001f1c <VL53L1_WrWord>
					0x00C6);
			break;
 8001134:	e02f      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800113c:	215e      	movs	r1, #94	@ 0x5e
 800113e:	4618      	mov	r0, r3
 8001140:	f000 feec 	bl	8001f1c <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 800114a:	2161      	movs	r1, #97	@ 0x61
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fee5 	bl	8001f1c <VL53L1_WrWord>
					0x01EA);
			break;
 8001152:	e020      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800115a:	215e      	movs	r1, #94	@ 0x5e
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fedd 	bl	8001f1c <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8001168:	2161      	movs	r1, #97	@ 0x61
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fed6 	bl	8001f1c <VL53L1_WrWord>
					0x02F8);
			break;
 8001170:	e011      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	f240 428f 	movw	r2, #1167	@ 0x48f
 8001178:	215e      	movs	r1, #94	@ 0x5e
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fece 	bl	8001f1c <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	f240 42a4 	movw	r2, #1188	@ 0x4a4
 8001186:	2161      	movs	r1, #97	@ 0x61
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fec7 	bl	8001f1c <VL53L1_WrWord>
					0x04A4);
			break;
 800118e:	e002      	b.n	8001196 <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
			break;
 8001194:	bf00      	nop
		}
	}
	return status;
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	6039      	str	r1, [r7, #0]
 80011ac:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 80011b2:	f107 020c 	add.w	r2, r7, #12
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	215e      	movs	r1, #94	@ 0x5e
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fe1a 	bl	8001df4 <VL53L1_RdWord>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 80011ca:	89bb      	ldrh	r3, [r7, #12]
 80011cc:	f240 5291 	movw	r2, #1425	@ 0x591
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d05b      	beq.n	800128c <VL53L1X_GetTimingBudgetInMs+0xea>
 80011d4:	f240 5291 	movw	r2, #1425	@ 0x591
 80011d8:	4293      	cmp	r3, r2
 80011da:	dc5c      	bgt.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80011dc:	f240 428f 	movw	r2, #1167	@ 0x48f
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d053      	beq.n	800128c <VL53L1X_GetTimingBudgetInMs+0xea>
 80011e4:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 80011e8:	da55      	bge.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80011ea:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d048      	beq.n	8001284 <VL53L1X_GetTimingBudgetInMs+0xe2>
 80011f2:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80011f6:	4293      	cmp	r3, r2
 80011f8:	dc4d      	bgt.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80011fa:	f240 22e1 	movw	r2, #737	@ 0x2e1
 80011fe:	4293      	cmp	r3, r2
 8001200:	d03c      	beq.n	800127c <VL53L1X_GetTimingBudgetInMs+0xda>
 8001202:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8001206:	4293      	cmp	r3, r2
 8001208:	dc45      	bgt.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 800120a:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800120e:	4293      	cmp	r3, r2
 8001210:	d038      	beq.n	8001284 <VL53L1X_GetTimingBudgetInMs+0xe2>
 8001212:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8001216:	4293      	cmp	r3, r2
 8001218:	dc3d      	bgt.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 800121a:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 800121e:	d02d      	beq.n	800127c <VL53L1X_GetTimingBudgetInMs+0xda>
 8001220:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8001224:	dc37      	bgt.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001226:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 800122a:	d023      	beq.n	8001274 <VL53L1X_GetTimingBudgetInMs+0xd2>
 800122c:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8001230:	dc31      	bgt.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001232:	2bd6      	cmp	r3, #214	@ 0xd6
 8001234:	d01a      	beq.n	800126c <VL53L1X_GetTimingBudgetInMs+0xca>
 8001236:	2bd6      	cmp	r3, #214	@ 0xd6
 8001238:	dc2d      	bgt.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 800123a:	2bad      	cmp	r3, #173	@ 0xad
 800123c:	d01a      	beq.n	8001274 <VL53L1X_GetTimingBudgetInMs+0xd2>
 800123e:	2bad      	cmp	r3, #173	@ 0xad
 8001240:	dc29      	bgt.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001242:	2b60      	cmp	r3, #96	@ 0x60
 8001244:	d012      	beq.n	800126c <VL53L1X_GetTimingBudgetInMs+0xca>
 8001246:	2b60      	cmp	r3, #96	@ 0x60
 8001248:	dc25      	bgt.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 800124a:	2b51      	cmp	r3, #81	@ 0x51
 800124c:	d00a      	beq.n	8001264 <VL53L1X_GetTimingBudgetInMs+0xc2>
 800124e:	2b51      	cmp	r3, #81	@ 0x51
 8001250:	dc21      	bgt.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001252:	2b1d      	cmp	r3, #29
 8001254:	d002      	beq.n	800125c <VL53L1X_GetTimingBudgetInMs+0xba>
 8001256:	2b1e      	cmp	r3, #30
 8001258:	d004      	beq.n	8001264 <VL53L1X_GetTimingBudgetInMs+0xc2>
 800125a:	e01c      	b.n	8001296 <VL53L1X_GetTimingBudgetInMs+0xf4>
		case 0x001D :
			*pTimingBudget = 15;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	220f      	movs	r2, #15
 8001260:	801a      	strh	r2, [r3, #0]
			break;
 8001262:	e01d      	b.n	80012a0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2214      	movs	r2, #20
 8001268:	801a      	strh	r2, [r3, #0]
			break;
 800126a:	e019      	b.n	80012a0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2221      	movs	r2, #33	@ 0x21
 8001270:	801a      	strh	r2, [r3, #0]
			break;
 8001272:	e015      	b.n	80012a0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2232      	movs	r2, #50	@ 0x32
 8001278:	801a      	strh	r2, [r3, #0]
			break;
 800127a:	e011      	b.n	80012a0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2264      	movs	r2, #100	@ 0x64
 8001280:	801a      	strh	r2, [r3, #0]
			break;
 8001282:	e00d      	b.n	80012a0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	22c8      	movs	r2, #200	@ 0xc8
 8001288:	801a      	strh	r2, [r3, #0]
			break;
 800128a:	e009      	b.n	80012a0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001292:	801a      	strh	r2, [r3, #0]
			break;
 8001294:	e004      	b.n	80012a0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		default:
			status = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	801a      	strh	r2, [r3, #0]
	}
	return status;
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	460a      	mov	r2, r1
 80012b6:	80fb      	strh	r3, [r7, #6]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 80012c0:	f107 020c 	add.w	r2, r7, #12
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff6a 	bl	80011a2 <VL53L1X_GetTimingBudgetInMs>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 80012d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <VL53L1X_SetDistanceMode+0x38>
		return 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e07f      	b.n	80013e4 <VL53L1X_SetDistanceMode+0x138>
	switch (DM) {
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d002      	beq.n	80012f0 <VL53L1X_SetDistanceMode+0x44>
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d033      	beq.n	8001356 <VL53L1X_SetDistanceMode+0xaa>
 80012ee:	e065      	b.n	80013bc <VL53L1X_SetDistanceMode+0x110>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	2214      	movs	r2, #20
 80012f4:	214b      	movs	r1, #75	@ 0x4b
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fdee 	bl	8001ed8 <VL53L1_WrByte>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	2207      	movs	r2, #7
 8001304:	2160      	movs	r1, #96	@ 0x60
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fde6 	bl	8001ed8 <VL53L1_WrByte>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	2205      	movs	r2, #5
 8001314:	2163      	movs	r1, #99	@ 0x63
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fdde 	bl	8001ed8 <VL53L1_WrByte>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	2238      	movs	r2, #56	@ 0x38
 8001324:	2169      	movs	r1, #105	@ 0x69
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fdd6 	bl	8001ed8 <VL53L1_WrByte>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	f240 7205 	movw	r2, #1797	@ 0x705
 8001336:	2178      	movs	r1, #120	@ 0x78
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fdef 	bl	8001f1c <VL53L1_WrWord>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	f240 6206 	movw	r2, #1542	@ 0x606
 8001348:	217a      	movs	r1, #122	@ 0x7a
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fde6 	bl	8001f1c <VL53L1_WrWord>
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]
		break;
 8001354:	e035      	b.n	80013c2 <VL53L1X_SetDistanceMode+0x116>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	220a      	movs	r2, #10
 800135a:	214b      	movs	r1, #75	@ 0x4b
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fdbb 	bl	8001ed8 <VL53L1_WrByte>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	220f      	movs	r2, #15
 800136a:	2160      	movs	r1, #96	@ 0x60
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fdb3 	bl	8001ed8 <VL53L1_WrByte>
 8001372:	4603      	mov	r3, r0
 8001374:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	220d      	movs	r2, #13
 800137a:	2163      	movs	r1, #99	@ 0x63
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fdab 	bl	8001ed8 <VL53L1_WrByte>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	22b8      	movs	r2, #184	@ 0xb8
 800138a:	2169      	movs	r1, #105	@ 0x69
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fda3 	bl	8001ed8 <VL53L1_WrByte>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	f640 720d 	movw	r2, #3853	@ 0xf0d
 800139c:	2178      	movs	r1, #120	@ 0x78
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fdbc 	bl	8001f1c <VL53L1_WrWord>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	f640 620e 	movw	r2, #3598	@ 0xe0e
 80013ae:	217a      	movs	r1, #122	@ 0x7a
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fdb3 	bl	8001f1c <VL53L1_WrWord>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]
		break;
 80013ba:	e002      	b.n	80013c2 <VL53L1X_SetDistanceMode+0x116>
	default:
		status = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
		break;
 80013c0:	bf00      	nop
	}

	if (status == 0)
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10a      	bne.n	80013e0 <VL53L1X_SetDistanceMode+0x134>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 80013ca:	89ba      	ldrh	r2, [r7, #12]
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fdd0 	bl	8000f76 <VL53L1X_SetTimingBudgetInMs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	4313      	orrs	r3, r2
 80013de:	73fb      	strb	r3, [r7, #15]
	return status;
 80013e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 80013fc:	f107 020e 	add.w	r2, r7, #14
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	214b      	movs	r1, #75	@ 0x4b
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fcaf 	bl	8001d68 <VL53L1_RdByte>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4313      	orrs	r3, r2
 8001414:	b25b      	sxtb	r3, r3
 8001416:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	2b14      	cmp	r3, #20
 800141c:	d102      	bne.n	8001424 <VL53L1X_GetDistanceMode+0x38>
		*DM=1;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	2201      	movs	r2, #1
 8001422:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	2b0a      	cmp	r3, #10
 8001428:	d102      	bne.n	8001430 <VL53L1X_GetDistanceMode+0x44>
		*DM=2;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2202      	movs	r2, #2
 800142e:	801a      	strh	r2, [r3, #0]
	return status;
 8001430:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	0000      	movs	r0, r0
	...

08001440 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001450:	f107 020c 	add.w	r2, r7, #12
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	21de      	movs	r1, #222	@ 0xde
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fccb 	bl	8001df4 <VL53L1_RdWord>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	4313      	orrs	r3, r2
 8001466:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8001468:	89bb      	ldrh	r3, [r7, #12]
 800146a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800146e:	b29b      	uxth	r3, r3
 8001470:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8001472:	89bb      	ldrh	r3, [r7, #12]
 8001474:	461a      	mov	r2, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f841 	bl	8000504 <__aeabi_ui2d>
 8001482:	a30b      	add	r3, pc, #44	@ (adr r3, 80014b0 <VL53L1X_SetInterMeasurementInMs+0x70>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff f8b6 	bl	80005f8 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fac2 	bl	8000a1c <__aeabi_d2uiz>
 8001498:	4602      	mov	r2, r0
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	216c      	movs	r1, #108	@ 0x6c
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 fd68 	bl	8001f74 <VL53L1_WrDWord>
	return status;
 80014a4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	33333333 	.word	0x33333333
 80014b4:	3ff13333 	.word	0x3ff13333

080014b8 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80014cc:	f107 020e 	add.w	r2, r7, #14
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	21e5      	movs	r1, #229	@ 0xe5
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fc47 	bl	8001d68 <VL53L1_RdByte>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 80014e4:	7bba      	ldrb	r2, [r7, #14]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	701a      	strb	r2, [r3, #0]
	sprintf(bmessage,"BootState, tmp = %X,state = %X",tmp,*state);
 80014ea:	7bbb      	ldrb	r3, [r7, #14]
 80014ec:	461a      	mov	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	490c      	ldr	r1, [pc, #48]	@ (8001524 <VL53L1X_BootState+0x6c>)
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <VL53L1X_BootState+0x70>)
 80014f6:	f003 fafd 	bl	8004af4 <siprintf>
	HAL_UART_Transmit(&huart1, bmessage, strlen(bmessage), 1000);
 80014fa:	480b      	ldr	r0, [pc, #44]	@ (8001528 <VL53L1X_BootState+0x70>)
 80014fc:	f7fe fe68 	bl	80001d0 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001508:	4907      	ldr	r1, [pc, #28]	@ (8001528 <VL53L1X_BootState+0x70>)
 800150a:	4808      	ldr	r0, [pc, #32]	@ (800152c <VL53L1X_BootState+0x74>)
 800150c:	f002 ff36 	bl	800437c <HAL_UART_Transmit>
	HAL_Delay(500);
 8001510:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001514:	f000 ff8e 	bl	8002434 <HAL_Delay>
	return status;
 8001518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	0800544c 	.word	0x0800544c
 8001528:	20000078 	.word	0x20000078
 800152c:	200004d8 	.word	0x200004d8

08001530 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8001540:	f107 020c 	add.w	r2, r7, #12
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	2196      	movs	r1, #150	@ 0x96
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fc53 	bl	8001df4 <VL53L1_RdWord>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	4313      	orrs	r3, r2
 8001556:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8001558:	89ba      	ldrh	r2, [r7, #12]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	801a      	strh	r2, [r3, #0]
	return status;
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	*rangeStatus = 255;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	22ff      	movs	r2, #255	@ 0xff
 8001580:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8001582:	f107 020e 	add.w	r2, r7, #14
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	2189      	movs	r1, #137	@ 0x89
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fbec 	bl	8001d68 <VL53L1_RdByte>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	4313      	orrs	r3, r2
 8001598:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt & 0x1F;
 800159a:	7bbb      	ldrb	r3, [r7, #14]
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	73bb      	strb	r3, [r7, #14]
	if (RgSt < 24)
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	2b17      	cmp	r3, #23
 80015a8:	d805      	bhi.n	80015b6 <VL53L1X_GetRangeStatus+0x4a>
		*rangeStatus = status_rtn[RgSt];
 80015aa:	7bbb      	ldrb	r3, [r7, #14]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <VL53L1X_GetRangeStatus+0x58>)
 80015b0:	5c9a      	ldrb	r2, [r3, r2]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	701a      	strb	r2, [r3, #0]
	return status;
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	08005630 	.word	0x08005630

080015c8 <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(uint16_t dev, int16_t OffsetValue)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	460a      	mov	r2, r1
 80015d2:	80fb      	strh	r3, [r7, #6]
 80015d4:	4613      	mov	r3, r2
 80015d6:	80bb      	strh	r3, [r7, #4]
	VL53L1X_ERROR status = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
	int16_t Temp;

	Temp = (OffsetValue*4);
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	81bb      	strh	r3, [r7, #12]
	status |= VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 80015e4:	89ba      	ldrh	r2, [r7, #12]
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	211e      	movs	r1, #30
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fc96 	bl	8001f1c <VL53L1_WrWord>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	73fb      	strb	r3, [r7, #15]
			(uint16_t)Temp);
	status |= VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2200      	movs	r2, #0
 80015fe:	2120      	movs	r1, #32
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fc8b 	bl	8001f1c <VL53L1_WrWord>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	4313      	orrs	r3, r2
 800160e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	2200      	movs	r2, #0
 8001614:	2122      	movs	r1, #34	@ 0x22
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fc80 	bl	8001f1c <VL53L1_WrWord>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	4313      	orrs	r3, r2
 8001624:	73fb      	strb	r3, [r7, #15]
	return status;
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <VL53L1X_SetXtalk>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetXtalk(uint16_t dev, uint16_t XtalkValue)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	460a      	mov	r2, r1
 800163e:	80fb      	strh	r3, [r7, #6]
 8001640:	4613      	mov	r3, r2
 8001642:	80bb      	strh	r3, [r7, #4]
/* XTalkValue in count per second to avoid float type */
	VL53L1X_ERROR status = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrWord(dev,
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	2200      	movs	r2, #0
 800164c:	2118      	movs	r1, #24
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fc64 	bl	8001f1c <VL53L1_WrWord>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	4313      	orrs	r3, r2
 800165c:	73fb      	strb	r3, [r7, #15]
			ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS,
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS,
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	2200      	movs	r2, #0
 8001662:	211a      	movs	r1, #26
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fc59 	bl	8001f1c <VL53L1_WrWord>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	4313      	orrs	r3, r2
 8001672:	73fb      	strb	r3, [r7, #15]
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
			(XtalkValue<<9)/1000); /* * << 9 (7.9 format) and /1000 to convert cps to kpcs */
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <VL53L1X_SetXtalk+0x74>)
 800167a:	fb82 1203 	smull	r1, r2, r2, r3
 800167e:	1192      	asrs	r2, r2, #6
 8001680:	17db      	asrs	r3, r3, #31
 8001682:	1ad3      	subs	r3, r2, r3
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
 8001684:	b29a      	uxth	r2, r3
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	2116      	movs	r1, #22
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fc46 	bl	8001f1c <VL53L1_WrWord>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	4313      	orrs	r3, r2
 8001698:	73fb      	strb	r3, [r7, #15]
	return status;
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	10624dd3 	.word	0x10624dd3

080016ac <VL53L1X_SetDistanceThreshold>:
}

VL53L1X_ERROR VL53L1X_SetDistanceThreshold(uint16_t dev, uint16_t ThreshLow,
			      uint16_t ThreshHigh, uint8_t Window,
			      uint8_t IntOnNoTarget)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4604      	mov	r4, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	80fb      	strh	r3, [r7, #6]
 80016be:	4603      	mov	r3, r0
 80016c0:	80bb      	strh	r3, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	807b      	strh	r3, [r7, #2]
 80016c6:	4613      	mov	r3, r2
 80016c8:	707b      	strb	r3, [r7, #1]
	VL53L1X_ERROR status = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO, &Temp);
 80016d2:	f107 020e 	add.w	r2, r7, #14
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	2146      	movs	r1, #70	@ 0x46
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fb44 	bl	8001d68 <VL53L1_RdByte>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x47;
 80016ea:	7bbb      	ldrb	r3, [r7, #14]
 80016ec:	f003 0347 	and.w	r3, r3, #71	@ 0x47
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	73bb      	strb	r3, [r7, #14]
	if (IntOnNoTarget == 0) {
 80016f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d111      	bne.n	8001720 <VL53L1X_SetDistanceThreshold+0x74>
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,
			       (Temp | (Window & 0x07)));
 80016fc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	b25a      	sxtb	r2, r3
 8001706:	7bbb      	ldrb	r3, [r7, #14]
 8001708:	b25b      	sxtb	r3, r3
 800170a:	4313      	orrs	r3, r2
 800170c:	b25b      	sxtb	r3, r3
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,
 800170e:	b2da      	uxtb	r2, r3
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	2146      	movs	r1, #70	@ 0x46
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fbdf 	bl	8001ed8 <VL53L1_WrByte>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e013      	b.n	8001748 <VL53L1X_SetDistanceThreshold+0x9c>
	} else {
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,
			       ((Temp | (Window & 0x07)) | 0x40));
 8001720:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	b25a      	sxtb	r2, r3
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	b25b      	sxtb	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b25b      	sxtb	r3, r3
 8001732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001736:	b25b      	sxtb	r3, r3
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,
 8001738:	b2da      	uxtb	r2, r3
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	2146      	movs	r1, #70	@ 0x46
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fbca 	bl	8001ed8 <VL53L1_WrByte>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
	}
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_HIGH, ThreshHigh);
 8001748:	887a      	ldrh	r2, [r7, #2]
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	2172      	movs	r1, #114	@ 0x72
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fbe4 	bl	8001f1c <VL53L1_WrWord>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	4313      	orrs	r3, r2
 800175c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_LOW, ThreshLow);
 800175e:	88ba      	ldrh	r2, [r7, #4]
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	2174      	movs	r1, #116	@ 0x74
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fbd9 	bl	8001f1c <VL53L1_WrWord>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	4313      	orrs	r3, r2
 8001772:	73fb      	strb	r3, [r7, #15]
	return status;
 8001774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}

08001780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <MX_GPIO_Init+0xb4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a25      	ldr	r2, [pc, #148]	@ (8001834 <MX_GPIO_Init+0xb4>)
 80017a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <MX_GPIO_Init+0xb4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <MX_GPIO_Init+0xb4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001834 <MX_GPIO_Init+0xb4>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <MX_GPIO_Init+0xb4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <MX_GPIO_Init+0xb4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a17      	ldr	r2, [pc, #92]	@ (8001834 <MX_GPIO_Init+0xb4>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <MX_GPIO_Init+0xb4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2120      	movs	r1, #32
 80017ee:	4812      	ldr	r0, [pc, #72]	@ (8001838 <MX_GPIO_Init+0xb8>)
 80017f0:	f001 f8de 	bl	80029b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin;
 80017f4:	2320      	movs	r3, #32
 80017f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	480b      	ldr	r0, [pc, #44]	@ (8001838 <MX_GPIO_Init+0xb8>)
 800180c:	f000 ff1c 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_GPIO_Pin;
 8001810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_GPIO_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4619      	mov	r1, r3
 8001824:	4804      	ldr	r0, [pc, #16]	@ (8001838 <MX_GPIO_Init+0xb8>)
 8001826:	f000 ff0f 	bl	8002648 <HAL_GPIO_Init>

}
 800182a:	bf00      	nop
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400

0800183c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <MX_I2C1_Init+0x50>)
 8001842:	4a13      	ldr	r2, [pc, #76]	@ (8001890 <MX_I2C1_Init+0x54>)
 8001844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_I2C1_Init+0x50>)
 8001848:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <MX_I2C1_Init+0x58>)
 800184a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800184c:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <MX_I2C1_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <MX_I2C1_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_I2C1_Init+0x50>)
 800185a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800185e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <MX_I2C1_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_I2C1_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <MX_I2C1_Init+0x50>)
 800187a:	f001 f8b3 	bl	80029e4 <HAL_I2C_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001884:	f000 f958 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000278 	.word	0x20000278
 8001890:	40005400 	.word	0x40005400
 8001894:	000186a0 	.word	0x000186a0

08001898 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	@ (800191c <HAL_I2C_MspInit+0x84>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12b      	bne.n	8001912 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_SCL_Pin|TOF_SDA_Pin;
 80018d6:	23c0      	movs	r3, #192	@ 0xc0
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018da:	2312      	movs	r3, #18
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e6:	2304      	movs	r3, #4
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <HAL_I2C_MspInit+0x8c>)
 80018f2:	f000 fea9 	bl	8002648 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 8001900:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40005400 	.word	0x40005400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020400 	.word	0x40020400

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192c:	f000 fd10 	bl	8002350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001930:	f000 f8a4 	bl	8001a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001934:	f7ff ff24 	bl	8001780 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001938:	f7ff ff80 	bl	800183c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800193c:	f000 f9a2 	bl	8001c84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	i=0;
 8001940:	4b45      	ldr	r3, [pc, #276]	@ (8001a58 <main+0x130>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
	while(1){

	  			sprintf(message,"Begin Init!\r\n");
 8001946:	4945      	ldr	r1, [pc, #276]	@ (8001a5c <main+0x134>)
 8001948:	4845      	ldr	r0, [pc, #276]	@ (8001a60 <main+0x138>)
 800194a:	f003 f8d3 	bl	8004af4 <siprintf>
	  			HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 800194e:	4844      	ldr	r0, [pc, #272]	@ (8001a60 <main+0x138>)
 8001950:	f7fe fc3e 	bl	80001d0 <strlen>
 8001954:	4603      	mov	r3, r0
 8001956:	b29a      	uxth	r2, r3
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	4940      	ldr	r1, [pc, #256]	@ (8001a60 <main+0x138>)
 800195e:	4841      	ldr	r0, [pc, #260]	@ (8001a64 <main+0x13c>)
 8001960:	f002 fd0c 	bl	800437c <HAL_UART_Transmit>
	  			HAL_Delay(1000);
 8001964:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001968:	f000 fd64 	bl	8002434 <HAL_Delay>
	  			i++;
 800196c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <main+0x130>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b38      	ldr	r3, [pc, #224]	@ (8001a58 <main+0x130>)
 8001976:	701a      	strb	r2, [r3, #0]
				if(i>4)
 8001978:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <main+0x130>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d800      	bhi.n	8001982 <main+0x5a>
	while(1){
 8001980:	e7e1      	b.n	8001946 <main+0x1e>
					break;
 8001982:	bf00      	nop
	  		}
  	if(VL53L1__Init()){
 8001984:	f000 fb68 	bl	8002058 <VL53L1__Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d020      	beq.n	80019d0 <main+0xa8>
  		i=0;
 800198e:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <main+0x130>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
  		while(1){

  			sprintf(message,"VL53 Init failed!\r\n");
 8001994:	4934      	ldr	r1, [pc, #208]	@ (8001a68 <main+0x140>)
 8001996:	4832      	ldr	r0, [pc, #200]	@ (8001a60 <main+0x138>)
 8001998:	f003 f8ac 	bl	8004af4 <siprintf>
  			HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 800199c:	4830      	ldr	r0, [pc, #192]	@ (8001a60 <main+0x138>)
 800199e:	f7fe fc17 	bl	80001d0 <strlen>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	492d      	ldr	r1, [pc, #180]	@ (8001a60 <main+0x138>)
 80019ac:	482d      	ldr	r0, [pc, #180]	@ (8001a64 <main+0x13c>)
 80019ae:	f002 fce5 	bl	800437c <HAL_UART_Transmit>
  			HAL_Delay(1000);
 80019b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b6:	f000 fd3d 	bl	8002434 <HAL_Delay>
  			i++;
 80019ba:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <main+0x130>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <main+0x130>)
 80019c4:	701a      	strb	r2, [r3, #0]
			if(i>4)
 80019c6:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <main+0x130>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d826      	bhi.n	8001a1c <main+0xf4>
  		while(1){
 80019ce:	e7e1      	b.n	8001994 <main+0x6c>
				break;
  		}
  	}
  	else{
  		i=0;
 80019d0:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <main+0x130>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
  		while(1){

  					sprintf(message,"VL53 Init SUCCESS!\r\n");
 80019d6:	4925      	ldr	r1, [pc, #148]	@ (8001a6c <main+0x144>)
 80019d8:	4821      	ldr	r0, [pc, #132]	@ (8001a60 <main+0x138>)
 80019da:	f003 f88b 	bl	8004af4 <siprintf>
  		  			HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80019de:	4820      	ldr	r0, [pc, #128]	@ (8001a60 <main+0x138>)
 80019e0:	f7fe fbf6 	bl	80001d0 <strlen>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	491c      	ldr	r1, [pc, #112]	@ (8001a60 <main+0x138>)
 80019ee:	481d      	ldr	r0, [pc, #116]	@ (8001a64 <main+0x13c>)
 80019f0:	f002 fcc4 	bl	800437c <HAL_UART_Transmit>
  		  			HAL_Delay(1000);
 80019f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f8:	f000 fd1c 	bl	8002434 <HAL_Delay>
  		  			i++;
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <main+0x130>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <main+0x130>)
 8001a06:	701a      	strb	r2, [r3, #0]
  					if(i>4)
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <main+0x130>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d800      	bhi.n	8001a12 <main+0xea>
  		while(1){
 8001a10:	e7e1      	b.n	80019d6 <main+0xae>
  						break;
 8001a12:	bf00      	nop
  		  		}
  		VL53L1X_StartRanging(VL53L1__ADDR);
 8001a14:	2052      	movs	r0, #82	@ 0x52
 8001a16:	f7ff fa47 	bl	8000ea8 <VL53L1X_StartRanging>
 8001a1a:	e000      	b.n	8001a1e <main+0xf6>
				break;
 8001a1c:	bf00      	nop

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    dis = VL53L1__GetDistance(&distance);
 8001a1e:	4814      	ldr	r0, [pc, #80]	@ (8001a70 <main+0x148>)
 8001a20:	f000 fbcc 	bl	80021bc <VL53L1__GetDistance>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <main+0x14c>)
 8001a2a:	701a      	strb	r2, [r3, #0]
		sprintf(message," status = %d ,Distance = %d\r\n",dis,distance);
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <main+0x14c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <main+0x148>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4910      	ldr	r1, [pc, #64]	@ (8001a78 <main+0x150>)
 8001a38:	4809      	ldr	r0, [pc, #36]	@ (8001a60 <main+0x138>)
 8001a3a:	f003 f85b 	bl	8004af4 <siprintf>
		HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8001a3e:	4808      	ldr	r0, [pc, #32]	@ (8001a60 <main+0x138>)
 8001a40:	f7fe fbc6 	bl	80001d0 <strlen>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4c:	4904      	ldr	r1, [pc, #16]	@ (8001a60 <main+0x138>)
 8001a4e:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <main+0x13c>)
 8001a50:	f002 fc94 	bl	800437c <HAL_UART_Transmit>
  {
 8001a54:	bf00      	nop
 8001a56:	e7e2      	b.n	8001a1e <main+0xf6>
 8001a58:	200004d0 	.word	0x200004d0
 8001a5c:	0800546c 	.word	0x0800546c
 8001a60:	200002cc 	.word	0x200002cc
 8001a64:	200004d8 	.word	0x200004d8
 8001a68:	0800547c 	.word	0x0800547c
 8001a6c:	08005490 	.word	0x08005490
 8001a70:	200004ce 	.word	0x200004ce
 8001a74:	200004cc 	.word	0x200004cc
 8001a78:	080054a8 	.word	0x080054a8

08001a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b094      	sub	sp, #80	@ 0x50
 8001a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a82:	f107 0320 	add.w	r3, r7, #32
 8001a86:	2230      	movs	r2, #48	@ 0x30
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 f852 	bl	8004b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <SystemClock_Config+0xb4>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	4a21      	ldr	r2, [pc, #132]	@ (8001b30 <SystemClock_Config+0xb4>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <SystemClock_Config+0xb4>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <SystemClock_Config+0xb8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <SystemClock_Config+0xb8>)
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <SystemClock_Config+0xb8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001adc:	2301      	movs	r3, #1
 8001ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae8:	f107 0320 	add.w	r3, r7, #32
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 ff9d 	bl	8003a2c <HAL_RCC_OscConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001af8:	f000 f81e 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afc:	230f      	movs	r3, #15
 8001afe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fa00 	bl	8003f1c <HAL_RCC_ClockConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001b22:	f000 f809 	bl	8001b38 <Error_Handler>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3750      	adds	r7, #80	@ 0x50
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40007000 	.word	0x40007000

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <Error_Handler+0x8>

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <NMI_Handler+0x4>

08001b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <MemManage_Handler+0x4>

08001bac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bea:	f000 fc03 	bl	80023f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <_sbrk+0x5c>)
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <_sbrk+0x60>)
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <_sbrk+0x64>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <_sbrk+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d207      	bcs.n	8001c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c24:	f002 ff8e 	bl	8004b44 <__errno>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e009      	b.n	8001c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <_sbrk+0x64>)
 8001c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20020000 	.word	0x20020000
 8001c54:	00000400 	.word	0x00000400
 8001c58:	200004d4 	.word	0x200004d4
 8001c5c:	20000878 	.word	0x20000878

08001c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <MX_USART1_UART_Init+0x4c>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <MX_USART1_UART_Init+0x50>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <MX_USART1_UART_Init+0x4c>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <MX_USART1_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <MX_USART1_UART_Init+0x4c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <MX_USART1_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <MX_USART1_UART_Init+0x4c>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <MX_USART1_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <MX_USART1_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cba:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <MX_USART1_UART_Init+0x4c>)
 8001cbc:	f002 fb0e 	bl	80042dc <HAL_UART_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cc6:	f7ff ff37 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200004d8 	.word	0x200004d8
 8001cd4:	40011000 	.word	0x40011000

08001cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <HAL_UART_MspInit+0x84>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d12c      	bne.n	8001d54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a17      	ldr	r2, [pc, #92]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001d04:	f043 0310 	orr.w	r3, r3, #16
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a10      	ldr	r2, [pc, #64]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d44:	2307      	movs	r3, #7
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <HAL_UART_MspInit+0x8c>)
 8001d50:	f000 fc7a 	bl	8002648 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020000 	.word	0x40020000

08001d68 <VL53L1_RdByte>:
uint8_t ret;
uint8_t amessage[512] ={'\0'};
extern I2C_HandleTypeDef VL53L1__PORT;


int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af04      	add	r7, sp, #16
 8001d6e:	4603      	mov	r3, r0
 8001d70:	603a      	str	r2, [r7, #0]
 8001d72:	80fb      	strh	r3, [r7, #6]
 8001d74:	460b      	mov	r3, r1
 8001d76:	80bb      	strh	r3, [r7, #4]
	ret = HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT);
 8001d78:	88ba      	ldrh	r2, [r7, #4]
 8001d7a:	88f9      	ldrh	r1, [r7, #6]
 8001d7c:	2314      	movs	r3, #20
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	2301      	movs	r3, #1
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2310      	movs	r3, #16
 8001d8a:	4815      	ldr	r0, [pc, #84]	@ (8001de0 <VL53L1_RdByte+0x78>)
 8001d8c:	f001 f868 	bl	8002e60 <HAL_I2C_Mem_Read>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <VL53L1_RdByte+0x7c>)
 8001d96:	701a      	strb	r2, [r3, #0]
	if (ret){
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <VL53L1_RdByte+0x7c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01a      	beq.n	8001dd6 <VL53L1_RdByte+0x6e>
//		while(1){
			sprintf(amessage,"I2C Error, tmp = data = %X , ret = %d",*data,ret);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <VL53L1_RdByte+0x7c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	490f      	ldr	r1, [pc, #60]	@ (8001de8 <VL53L1_RdByte+0x80>)
 8001dac:	480f      	ldr	r0, [pc, #60]	@ (8001dec <VL53L1_RdByte+0x84>)
 8001dae:	f002 fea1 	bl	8004af4 <siprintf>
			HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 8001db2:	480e      	ldr	r0, [pc, #56]	@ (8001dec <VL53L1_RdByte+0x84>)
 8001db4:	f7fe fa0c 	bl	80001d0 <strlen>
 8001db8:	4603      	mov	r3, r0
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	490a      	ldr	r1, [pc, #40]	@ (8001dec <VL53L1_RdByte+0x84>)
 8001dc2:	480b      	ldr	r0, [pc, #44]	@ (8001df0 <VL53L1_RdByte+0x88>)
 8001dc4:	f002 fada 	bl	800437c <HAL_UART_Transmit>
			HAL_Delay(500);
 8001dc8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dcc:	f000 fb32 	bl	8002434 <HAL_Delay>
//		}
		return VL53L1__IO_ERROR;
 8001dd0:	f06f 030c 	mvn.w	r3, #12
 8001dd4:	e000      	b.n	8001dd8 <VL53L1_RdByte+0x70>
	}

	else
		return 0;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000278 	.word	0x20000278
 8001de4:	20000520 	.word	0x20000520
 8001de8:	080054c8 	.word	0x080054c8
 8001dec:	20000524 	.word	0x20000524
 8001df0:	200004d8 	.word	0x200004d8

08001df4 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af04      	add	r7, sp, #16
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	603a      	str	r2, [r7, #0]
 8001dfe:	80fb      	strh	r3, [r7, #6]
 8001e00:	460b      	mov	r3, r1
 8001e02:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)data, 2, I2C_COMM_TIMEOUT))
 8001e04:	88ba      	ldrh	r2, [r7, #4]
 8001e06:	88f9      	ldrh	r1, [r7, #6]
 8001e08:	2314      	movs	r3, #20
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2310      	movs	r3, #16
 8001e16:	480c      	ldr	r0, [pc, #48]	@ (8001e48 <VL53L1_RdWord+0x54>)
 8001e18:	f001 f822 	bl	8002e60 <HAL_I2C_Mem_Read>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <VL53L1_RdWord+0x34>
		return VL53L1__IO_ERROR;
 8001e22:	f06f 030c 	mvn.w	r3, #12
 8001e26:	e00b      	b.n	8001e40 <VL53L1_RdWord+0x4c>
	else {
		*data=__REVSH(*data);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	81fb      	strh	r3, [r7, #14]
  return (int16_t)__builtin_bswap16(value);
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	ba5b      	rev16	r3, r3
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	801a      	strh	r2, [r3, #0]
		return 0;
 8001e3e:	2300      	movs	r3, #0
	}
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000278 	.word	0x20000278

08001e4c <VL53L1_ReadMulti>:
		*data=__REV(*data);
		return 0;
	}
}

int8_t VL53L1_ReadMulti(uint16_t dev, uint16_t index, uint8_t *pdata, uint32_t count){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af04      	add	r7, sp, #16
 8001e52:	60ba      	str	r2, [r7, #8]
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4603      	mov	r3, r0
 8001e58:	81fb      	strh	r3, [r7, #14]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	81bb      	strh	r3, [r7, #12]
	ret = HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, pdata, count, I2C_COMM_TIMEOUT);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	89ba      	ldrh	r2, [r7, #12]
 8001e64:	89f9      	ldrh	r1, [r7, #14]
 8001e66:	2014      	movs	r0, #20
 8001e68:	9002      	str	r0, [sp, #8]
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2310      	movs	r3, #16
 8001e72:	4814      	ldr	r0, [pc, #80]	@ (8001ec4 <VL53L1_ReadMulti+0x78>)
 8001e74:	f000 fff4 	bl	8002e60 <HAL_I2C_Mem_Read>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <VL53L1_ReadMulti+0x7c>)
 8001e7e:	701a      	strb	r2, [r3, #0]
	if (ret){
 8001e80:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <VL53L1_ReadMulti+0x7c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d018      	beq.n	8001eba <VL53L1_ReadMulti+0x6e>
		sprintf(amessage,"I2C Multi Error ret = %d ",ret);
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <VL53L1_ReadMulti+0x7c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	490f      	ldr	r1, [pc, #60]	@ (8001ecc <VL53L1_ReadMulti+0x80>)
 8001e90:	480f      	ldr	r0, [pc, #60]	@ (8001ed0 <VL53L1_ReadMulti+0x84>)
 8001e92:	f002 fe2f 	bl	8004af4 <siprintf>
		HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 8001e96:	480e      	ldr	r0, [pc, #56]	@ (8001ed0 <VL53L1_ReadMulti+0x84>)
 8001e98:	f7fe f99a 	bl	80001d0 <strlen>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea4:	490a      	ldr	r1, [pc, #40]	@ (8001ed0 <VL53L1_ReadMulti+0x84>)
 8001ea6:	480b      	ldr	r0, [pc, #44]	@ (8001ed4 <VL53L1_ReadMulti+0x88>)
 8001ea8:	f002 fa68 	bl	800437c <HAL_UART_Transmit>
		HAL_Delay(500);
 8001eac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001eb0:	f000 fac0 	bl	8002434 <HAL_Delay>
		return VL53L1__IO_ERROR;
 8001eb4:	f06f 030c 	mvn.w	r3, #12
 8001eb8:	e000      	b.n	8001ebc <VL53L1_ReadMulti+0x70>
	}

	else
		return 0;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000278 	.word	0x20000278
 8001ec8:	20000520 	.word	0x20000520
 8001ecc:	080054f0 	.word	0x080054f0
 8001ed0:	20000524 	.word	0x20000524
 8001ed4:	200004d8 	.word	0x200004d8

08001ed8 <VL53L1_WrByte>:

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af04      	add	r7, sp, #16
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	80bb      	strh	r3, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 8001eea:	88ba      	ldrh	r2, [r7, #4]
 8001eec:	88f9      	ldrh	r1, [r7, #6]
 8001eee:	2314      	movs	r3, #20
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	1cfb      	adds	r3, r7, #3
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2310      	movs	r3, #16
 8001efc:	4806      	ldr	r0, [pc, #24]	@ (8001f18 <VL53L1_WrByte+0x40>)
 8001efe:	f000 feb5 	bl	8002c6c <HAL_I2C_Mem_Write>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <VL53L1_WrByte+0x36>
		return VL53L1__IO_ERROR;
 8001f08:	f06f 030c 	mvn.w	r3, #12
 8001f0c:	e000      	b.n	8001f10 <VL53L1_WrByte+0x38>
	else
		return 0;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000278 	.word	0x20000278

08001f1c <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af04      	add	r7, sp, #16
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
 8001f26:	460b      	mov	r3, r1
 8001f28:	80bb      	strh	r3, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	807b      	strh	r3, [r7, #2]
	data=__REVSH(data);
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	81fb      	strh	r3, [r7, #14]
 8001f34:	89fb      	ldrh	r3, [r7, #14]
 8001f36:	ba5b      	rev16	r3, r3
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	807b      	strh	r3, [r7, #2]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 2, I2C_COMM_TIMEOUT))
 8001f40:	88ba      	ldrh	r2, [r7, #4]
 8001f42:	88f9      	ldrh	r1, [r7, #6]
 8001f44:	2314      	movs	r3, #20
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	1cbb      	adds	r3, r7, #2
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2310      	movs	r3, #16
 8001f52:	4807      	ldr	r0, [pc, #28]	@ (8001f70 <VL53L1_WrWord+0x54>)
 8001f54:	f000 fe8a 	bl	8002c6c <HAL_I2C_Mem_Write>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <VL53L1_WrWord+0x48>
		return VL53L1__IO_ERROR;
 8001f5e:	f06f 030c 	mvn.w	r3, #12
 8001f62:	e000      	b.n	8001f66 <VL53L1_WrWord+0x4a>
	else
		return 0;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000278 	.word	0x20000278

08001f74 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af04      	add	r7, sp, #16
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	603a      	str	r2, [r7, #0]
 8001f7e:	80fb      	strh	r3, [r7, #6]
 8001f80:	460b      	mov	r3, r1
 8001f82:	80bb      	strh	r3, [r7, #4]
	data=__REV(data);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	60fb      	str	r3, [r7, #12]
  return __builtin_bswap32(value);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	ba1b      	rev	r3, r3
 8001f8c:	603b      	str	r3, [r7, #0]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 4, I2C_COMM_TIMEOUT))
 8001f8e:	88ba      	ldrh	r2, [r7, #4]
 8001f90:	88f9      	ldrh	r1, [r7, #6]
 8001f92:	2314      	movs	r3, #20
 8001f94:	9302      	str	r3, [sp, #8]
 8001f96:	2304      	movs	r3, #4
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	4806      	ldr	r0, [pc, #24]	@ (8001fbc <VL53L1_WrDWord+0x48>)
 8001fa2:	f000 fe63 	bl	8002c6c <HAL_I2C_Mem_Write>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <VL53L1_WrDWord+0x3e>
		return VL53L1__IO_ERROR;
 8001fac:	f06f 030c 	mvn.w	r3, #12
 8001fb0:	e000      	b.n	8001fb4 <VL53L1_WrDWord+0x40>
	else
		return 0;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000278 	.word	0x20000278

08001fc0 <VL53L1__Xshut>:
 * @brief 		set the VL53L1 Xshutdown pin
 * 				waiting for a complete boot sequence
 * @param 	1	VL53L1 enabled, wait for boot
 * 			0	VL53L1 disabled
 ****************************************************/
uint8_t VL53L1__Xshut(uint8_t level){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t sensorStatus =0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73bb      	strb	r3, [r7, #14]
	uint8_t status =0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, level);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2120      	movs	r1, #32
 8001fd8:	481b      	ldr	r0, [pc, #108]	@ (8002048 <VL53L1__Xshut+0x88>)
 8001fda:	f000 fce9 	bl	80029b0 <HAL_GPIO_WritePin>
	if (level) {
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d02b      	beq.n	800203c <VL53L1__Xshut+0x7c>
		while (!(sensorStatus & 0x01)) {
 8001fe4:	e025      	b.n	8002032 <VL53L1__Xshut+0x72>
			HAL_Delay(2);
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	f000 fa24 	bl	8002434 <HAL_Delay>
			status |= VL53L1X_BootState(VL53L1__ADDR, &sensorStatus);
 8001fec:	f107 030e 	add.w	r3, r7, #14
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	2052      	movs	r0, #82	@ 0x52
 8001ff4:	f7ff fa60 	bl	80014b8 <VL53L1X_BootState>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002000:	4313      	orrs	r3, r2
 8002002:	b25b      	sxtb	r3, r3
 8002004:	73fb      	strb	r3, [r7, #15]
			sprintf(amessage,"sensorStatus = %X,status = %X, error",sensorStatus,status);
 8002006:	7bbb      	ldrb	r3, [r7, #14]
 8002008:	461a      	mov	r2, r3
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	490f      	ldr	r1, [pc, #60]	@ (800204c <VL53L1__Xshut+0x8c>)
 800200e:	4810      	ldr	r0, [pc, #64]	@ (8002050 <VL53L1__Xshut+0x90>)
 8002010:	f002 fd70 	bl	8004af4 <siprintf>
			HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 8002014:	480e      	ldr	r0, [pc, #56]	@ (8002050 <VL53L1__Xshut+0x90>)
 8002016:	f7fe f8db 	bl	80001d0 <strlen>
 800201a:	4603      	mov	r3, r0
 800201c:	b29a      	uxth	r2, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002022:	490b      	ldr	r1, [pc, #44]	@ (8002050 <VL53L1__Xshut+0x90>)
 8002024:	480b      	ldr	r0, [pc, #44]	@ (8002054 <VL53L1__Xshut+0x94>)
 8002026:	f002 f9a9 	bl	800437c <HAL_UART_Transmit>
			HAL_Delay(500);
 800202a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800202e:	f000 fa01 	bl	8002434 <HAL_Delay>
		while (!(sensorStatus & 0x01)) {
 8002032:	7bbb      	ldrb	r3, [r7, #14]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0d4      	beq.n	8001fe6 <VL53L1__Xshut+0x26>
		}
	}
	return (status);
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40020400 	.word	0x40020400
 800204c:	0800550c 	.word	0x0800550c
 8002050:	20000524 	.word	0x20000524
 8002054:	200004d8 	.word	0x200004d8

08002058 <VL53L1__Init>:
 * 				test VL53L1 presence, initialize the sensor, and
 * 				set it the default Distance Mode, Timing Budget
 * 				and Intermeasurement time
 * @return:	0	if no errors detected in setting up VL53L1X
 ************************************************************/
uint8_t VL53L1__Init(){
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af02      	add	r7, sp, #8
	uint8_t refRegs[4] = {0,0,0,0};
 800205e:	2300      	movs	r3, #0
 8002060:	603b      	str	r3, [r7, #0]
	uint8_t status =0;
 8002062:	2300      	movs	r3, #0
 8002064:	71fb      	strb	r3, [r7, #7]

	// Enable VL53L1 sensor waiting for a complete boot sequence
#ifdef	VL53L1__USING_XSHUT
	status |= VL53L1__Xshut(1);
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff ffaa 	bl	8001fc0 <VL53L1__Xshut>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	4313      	orrs	r3, r2
 8002074:	71fb      	strb	r3, [r7, #7]
	if (status){
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d014      	beq.n	80020a6 <VL53L1__Init+0x4e>
		while(1){
			sprintf(amessage,"Xshut error");
 800207c:	494b      	ldr	r1, [pc, #300]	@ (80021ac <VL53L1__Init+0x154>)
 800207e:	484c      	ldr	r0, [pc, #304]	@ (80021b0 <VL53L1__Init+0x158>)
 8002080:	f002 fd38 	bl	8004af4 <siprintf>
			HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 8002084:	484a      	ldr	r0, [pc, #296]	@ (80021b0 <VL53L1__Init+0x158>)
 8002086:	f7fe f8a3 	bl	80001d0 <strlen>
 800208a:	4603      	mov	r3, r0
 800208c:	b29a      	uxth	r2, r3
 800208e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002092:	4947      	ldr	r1, [pc, #284]	@ (80021b0 <VL53L1__Init+0x158>)
 8002094:	4847      	ldr	r0, [pc, #284]	@ (80021b4 <VL53L1__Init+0x15c>)
 8002096:	f002 f971 	bl	800437c <HAL_UART_Transmit>
			HAL_Delay(500);
 800209a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800209e:	f000 f9c9 	bl	8002434 <HAL_Delay>
		while(1){
 80020a2:	bf00      	nop
 80020a4:	e7ea      	b.n	800207c <VL53L1__Init+0x24>

		return (status);
	}

#endif
	HAL_Delay(4);
 80020a6:	2004      	movs	r0, #4
 80020a8:	f000 f9c4 	bl	8002434 <HAL_Delay>

	//check if VL53L1X is alive and kicking. Remove MASKREV if VL53L1
	VL53L1_ReadMulti(VL53L1__ADDR, VL53L1__MODELID_INDEX, refRegs, 4);
 80020ac:	463a      	mov	r2, r7
 80020ae:	2304      	movs	r3, #4
 80020b0:	f240 110f 	movw	r1, #271	@ 0x10f
 80020b4:	2052      	movs	r0, #82	@ 0x52
 80020b6:	f7ff fec9 	bl	8001e4c <VL53L1_ReadMulti>
	if ((refRegs[0]!=VL53L1__MODELID_VALUE) || (refRegs[1]!=VL53L1__MODULETYPE_VALUE) || (refRegs[2]!=VL53L1__MASKREV_VALUE)){
 80020ba:	783b      	ldrb	r3, [r7, #0]
 80020bc:	2bea      	cmp	r3, #234	@ 0xea
 80020be:	d000      	beq.n	80020c2 <VL53L1__Init+0x6a>
 80020c0:	e006      	b.n	80020d0 <VL53L1__Init+0x78>
 80020c2:	787b      	ldrb	r3, [r7, #1]
 80020c4:	2bcc      	cmp	r3, #204	@ 0xcc
 80020c6:	d103      	bne.n	80020d0 <VL53L1__Init+0x78>
 80020c8:	78bb      	ldrb	r3, [r7, #2]
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d100      	bne.n	80020d0 <VL53L1__Init+0x78>
 80020ce:	e013      	b.n	80020f8 <VL53L1__Init+0xa0>
		while(1){
			sprintf(amessage,"VL53 Init failed in platform.c !\r\n");
 80020d0:	4939      	ldr	r1, [pc, #228]	@ (80021b8 <VL53L1__Init+0x160>)
 80020d2:	4837      	ldr	r0, [pc, #220]	@ (80021b0 <VL53L1__Init+0x158>)
 80020d4:	f002 fd0e 	bl	8004af4 <siprintf>
			HAL_UART_Transmit(&huart1, amessage, strlen(amessage), HAL_MAX_DELAY);
 80020d8:	4835      	ldr	r0, [pc, #212]	@ (80021b0 <VL53L1__Init+0x158>)
 80020da:	f7fe f879 	bl	80001d0 <strlen>
 80020de:	4603      	mov	r3, r0
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	4932      	ldr	r1, [pc, #200]	@ (80021b0 <VL53L1__Init+0x158>)
 80020e8:	4832      	ldr	r0, [pc, #200]	@ (80021b4 <VL53L1__Init+0x15c>)
 80020ea:	f002 f947 	bl	800437c <HAL_UART_Transmit>
			HAL_Delay(1000);
 80020ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020f2:	f000 f99f 	bl	8002434 <HAL_Delay>
		while(1){
 80020f6:	e7eb      	b.n	80020d0 <VL53L1__Init+0x78>



	// VL53L1X sensor is available
	/* initializing: default setting  */
	status |= VL53L1X_SensorInit(VL53L1__ADDR);
 80020f8:	2052      	movs	r0, #82	@ 0x52
 80020fa:	f7fe fe27 	bl	8000d4c <VL53L1X_SensorInit>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	4313      	orrs	r3, r2
 8002108:	b25b      	sxtb	r3, r3
 800210a:	71fb      	strb	r3, [r7, #7]
	/* initializing: device calibration settings*/
	status |= VL53L1X_SetOffset(VL53L1__ADDR, VL53L1__CALIB_OFFSET);
 800210c:	f06f 0118 	mvn.w	r1, #24
 8002110:	2052      	movs	r0, #82	@ 0x52
 8002112:	f7ff fa59 	bl	80015c8 <VL53L1X_SetOffset>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	4313      	orrs	r3, r2
 8002120:	b25b      	sxtb	r3, r3
 8002122:	71fb      	strb	r3, [r7, #7]
	status |= VL53L1X_SetXtalk(VL53L1__ADDR, VL53L1__CALIB_XTALK);
 8002124:	2100      	movs	r1, #0
 8002126:	2052      	movs	r0, #82	@ 0x52
 8002128:	f7ff fa84 	bl	8001634 <VL53L1X_SetXtalk>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	4313      	orrs	r3, r2
 8002136:	b25b      	sxtb	r3, r3
 8002138:	71fb      	strb	r3, [r7, #7]
	/* initializing: project settings */
	status |= VL53L1X_SetDistanceMode(VL53L1__ADDR, VL53L1__DISTANCE_MODE);
 800213a:	2102      	movs	r1, #2
 800213c:	2052      	movs	r0, #82	@ 0x52
 800213e:	f7ff f8b5 	bl	80012ac <VL53L1X_SetDistanceMode>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	4313      	orrs	r3, r2
 800214c:	b25b      	sxtb	r3, r3
 800214e:	71fb      	strb	r3, [r7, #7]
	status |= VL53L1X_SetTimingBudgetInMs(VL53L1__ADDR, VL53L1__TIMING_BUDGET);
 8002150:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002154:	2052      	movs	r0, #82	@ 0x52
 8002156:	f7fe ff0e 	bl	8000f76 <VL53L1X_SetTimingBudgetInMs>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	4313      	orrs	r3, r2
 8002164:	b25b      	sxtb	r3, r3
 8002166:	71fb      	strb	r3, [r7, #7]
	status |= VL53L1X_SetInterMeasurementInMs(VL53L1__ADDR, VL53L1__INTERMEASUREMENT);
 8002168:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800216c:	2052      	movs	r0, #82	@ 0x52
 800216e:	f7ff f967 	bl	8001440 <VL53L1X_SetInterMeasurementInMs>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	4313      	orrs	r3, r2
 800217c:	b25b      	sxtb	r3, r3
 800217e:	71fb      	strb	r3, [r7, #7]
	status |= VL53L1X_SetDistanceThreshold(VL53L1__ADDR,VL53L1__LOWER_THRESHOLD, VL53L1__UPPER_THRESHOLD, VL53L1__WINDOW_MODE, 0);
 8002180:	2300      	movs	r3, #0
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2300      	movs	r3, #0
 8002186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800218e:	2052      	movs	r0, #82	@ 0x52
 8002190:	f7ff fa8c 	bl	80016ac <VL53L1X_SetDistanceThreshold>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4313      	orrs	r3, r2
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	71fb      	strb	r3, [r7, #7]

	return (status);
 80021a2:	79fb      	ldrb	r3, [r7, #7]
};
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	08005534 	.word	0x08005534
 80021b0:	20000524 	.word	0x20000524
 80021b4:	200004d8 	.word	0x200004d8
 80021b8:	08005540 	.word	0x08005540

080021bc <VL53L1__GetDistance>:
 * @param	level	minimum value that RangeStatus must have
 * 					to consider wreading accepted
 * @return			0 		if errors or not accepptable reading
 * 					value	the read Distance, if not 0
 *****************************************/
uint8_t  VL53L1__GetDistance(uint16_t *Distance){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	uint8_t RangingStatus;
	uint8_t status =0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	75fb      	strb	r3, [r7, #23]
	uint32_t testingTime=HAL_GetTick();
 80021c8:	f000 f928 	bl	800241c <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]
	static uint16_t PrevDistance=0;

#ifdef	VL53L1__USING_GPIO
	// VL53L1X data available test if TOF_GPIO pin is available
	while ((!HAL_GPIO_ReadPin(TOF_GPIO_GPIO_Port, TOF_GPIO_Pin)) && ((HAL_GetTick()-testingTime)<=VL53L1__INTERMEASUREMENT)) {};
 80021ce:	bf00      	nop
 80021d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021d4:	4842      	ldr	r0, [pc, #264]	@ (80022e0 <VL53L1__GetDistance+0x124>)
 80021d6:	f000 fbd3 	bl	8002980 <HAL_GPIO_ReadPin>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <VL53L1__GetDistance+0x34>
 80021e0:	f000 f91c 	bl	800241c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f5b3 7ffd 	cmp.w	r3, #506	@ 0x1fa
 80021ee:	d3ef      	bcc.n	80021d0 <VL53L1__GetDistance+0x14>
	if (HAL_GPIO_ReadPin(TOF_GPIO_GPIO_Port, TOF_GPIO_Pin)) {
 80021f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021f4:	483a      	ldr	r0, [pc, #232]	@ (80022e0 <VL53L1__GetDistance+0x124>)
 80021f6:	f000 fbc3 	bl	8002980 <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d055      	beq.n	80022ac <VL53L1__GetDistance+0xf0>
	uint8_t dataReady=0;
	while ((dataReady == 0) && ((HAL_GetTick()-testingTime)<VL53L1__INTERMEASUREMENT) && (!status))
		status |= VL53L1X_CheckForDataReady(VL53L1__ADDR, &dataReady);
	if (dataReady && (!status)) {
#endif
		status |= VL53L1X_GetRangeStatus(VL53L1__ADDR, &RangingStatus);
 8002200:	f107 030f 	add.w	r3, r7, #15
 8002204:	4619      	mov	r1, r3
 8002206:	2052      	movs	r0, #82	@ 0x52
 8002208:	f7ff f9b0 	bl	800156c <VL53L1X_GetRangeStatus>
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002214:	4313      	orrs	r3, r2
 8002216:	b25b      	sxtb	r3, r3
 8002218:	75fb      	strb	r3, [r7, #23]
		status |= VL53L1X_GetDistance(VL53L1__ADDR, Distance);
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	2052      	movs	r0, #82	@ 0x52
 800221e:	f7ff f987 	bl	8001530 <VL53L1X_GetDistance>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800222a:	4313      	orrs	r3, r2
 800222c:	b25b      	sxtb	r3, r3
 800222e:	75fb      	strb	r3, [r7, #23]
		status |= VL53L1X_ClearInterrupt(VL53L1__ADDR);
 8002230:	2052      	movs	r0, #82	@ 0x52
 8002232:	f7fe fdf7 	bl	8000e24 <VL53L1X_ClearInterrupt>
 8002236:	4603      	mov	r3, r0
 8002238:	461a      	mov	r2, r3
 800223a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800223e:	4313      	orrs	r3, r2
 8002240:	b25b      	sxtb	r3, r3
 8002242:	75fb      	strb	r3, [r7, #23]
		if ((status==0) && (RangingStatus<=VL53L1__RANGE_STATUS_THRESH)) {
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d118      	bne.n	800227c <VL53L1__GetDistance+0xc0>
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d815      	bhi.n	800227c <VL53L1__GetDistance+0xc0>
//			while(1){
				sprintf(amessage,"(status==%d) && (RangingStatus<=VL53L1__RANGE_STATUS_THRESH)\r\n",status);
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	461a      	mov	r2, r3
 8002254:	4923      	ldr	r1, [pc, #140]	@ (80022e4 <VL53L1__GetDistance+0x128>)
 8002256:	4824      	ldr	r0, [pc, #144]	@ (80022e8 <VL53L1__GetDistance+0x12c>)
 8002258:	f002 fc4c 	bl	8004af4 <siprintf>
				HAL_UART_Transmit(&huart1, amessage, strlen(amessage), HAL_MAX_DELAY);
 800225c:	4822      	ldr	r0, [pc, #136]	@ (80022e8 <VL53L1__GetDistance+0x12c>)
 800225e:	f7fd ffb7 	bl	80001d0 <strlen>
 8002262:	4603      	mov	r3, r0
 8002264:	b29a      	uxth	r2, r3
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	491f      	ldr	r1, [pc, #124]	@ (80022e8 <VL53L1__GetDistance+0x12c>)
 800226c:	481f      	ldr	r0, [pc, #124]	@ (80022ec <VL53L1__GetDistance+0x130>)
 800226e:	f002 f885 	bl	800437c <HAL_UART_Transmit>
//				HAL_Delay(1000);
//			}
			PrevDistance=*Distance;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <VL53L1__GetDistance+0x134>)
 8002278:	801a      	strh	r2, [r3, #0]
		if ((status==0) && (RangingStatus<=VL53L1__RANGE_STATUS_THRESH)) {
 800227a:	e02c      	b.n	80022d6 <VL53L1__GetDistance+0x11a>
		} else {
//			while(1){
				sprintf(amessage,"else  ",status);
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	461a      	mov	r2, r3
 8002280:	491c      	ldr	r1, [pc, #112]	@ (80022f4 <VL53L1__GetDistance+0x138>)
 8002282:	4819      	ldr	r0, [pc, #100]	@ (80022e8 <VL53L1__GetDistance+0x12c>)
 8002284:	f002 fc36 	bl	8004af4 <siprintf>
				HAL_UART_Transmit(&huart1, amessage, strlen(amessage), HAL_MAX_DELAY);
 8002288:	4817      	ldr	r0, [pc, #92]	@ (80022e8 <VL53L1__GetDistance+0x12c>)
 800228a:	f7fd ffa1 	bl	80001d0 <strlen>
 800228e:	4603      	mov	r3, r0
 8002290:	b29a      	uxth	r2, r3
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	4914      	ldr	r1, [pc, #80]	@ (80022e8 <VL53L1__GetDistance+0x12c>)
 8002298:	4814      	ldr	r0, [pc, #80]	@ (80022ec <VL53L1__GetDistance+0x130>)
 800229a:	f002 f86f 	bl	800437c <HAL_UART_Transmit>
//				HAL_Delay(1000);
//			}
			*Distance=PrevDistance;
 800229e:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <VL53L1__GetDistance+0x134>)
 80022a0:	881a      	ldrh	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	801a      	strh	r2, [r3, #0]
			status=1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
 80022aa:	e014      	b.n	80022d6 <VL53L1__GetDistance+0x11a>
		}
	} else{
//		while(1){
			sprintf(amessage,"dataReady =  && status = (!status)\r\n");
 80022ac:	4912      	ldr	r1, [pc, #72]	@ (80022f8 <VL53L1__GetDistance+0x13c>)
 80022ae:	480e      	ldr	r0, [pc, #56]	@ (80022e8 <VL53L1__GetDistance+0x12c>)
 80022b0:	f002 fc20 	bl	8004af4 <siprintf>
			HAL_UART_Transmit(&huart1, amessage, strlen(amessage), HAL_MAX_DELAY);
 80022b4:	480c      	ldr	r0, [pc, #48]	@ (80022e8 <VL53L1__GetDistance+0x12c>)
 80022b6:	f7fd ff8b 	bl	80001d0 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	b29a      	uxth	r2, r3
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	4909      	ldr	r1, [pc, #36]	@ (80022e8 <VL53L1__GetDistance+0x12c>)
 80022c4:	4809      	ldr	r0, [pc, #36]	@ (80022ec <VL53L1__GetDistance+0x130>)
 80022c6:	f002 f859 	bl	800437c <HAL_UART_Transmit>
//			HAL_Delay(1000);
//		}
		*Distance=PrevDistance;
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <VL53L1__GetDistance+0x134>)
 80022cc:	881a      	ldrh	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	801a      	strh	r2, [r3, #0]
		status=1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40020400 	.word	0x40020400
 80022e4:	08005564 	.word	0x08005564
 80022e8:	20000524 	.word	0x20000524
 80022ec:	200004d8 	.word	0x200004d8
 80022f0:	20000724 	.word	0x20000724
 80022f4:	080055a4 	.word	0x080055a4
 80022f8:	080055ac 	.word	0x080055ac

080022fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002334 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002300:	f7ff fcae 	bl	8001c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002304:	480c      	ldr	r0, [pc, #48]	@ (8002338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002306:	490d      	ldr	r1, [pc, #52]	@ (800233c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002308:	4a0d      	ldr	r2, [pc, #52]	@ (8002340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800230c:	e002      	b.n	8002314 <LoopCopyDataInit>

0800230e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002312:	3304      	adds	r3, #4

08002314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002318:	d3f9      	bcc.n	800230e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231a:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800231c:	4c0a      	ldr	r4, [pc, #40]	@ (8002348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002320:	e001      	b.n	8002326 <LoopFillZerobss>

08002322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002324:	3204      	adds	r2, #4

08002326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002328:	d3fb      	bcc.n	8002322 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800232a:	f002 fc11 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800232e:	f7ff fafb 	bl	8001928 <main>
  bx  lr    
 8002332:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800233c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002340:	080056a4 	.word	0x080056a4
  ldr r2, =_sbss
 8002344:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002348:	20000874 	.word	0x20000874

0800234c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800234c:	e7fe      	b.n	800234c <ADC_IRQHandler>
	...

08002350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002354:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0d      	ldr	r2, [pc, #52]	@ (8002390 <HAL_Init+0x40>)
 800235a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800235e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002360:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <HAL_Init+0x40>)
 8002366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	@ (8002390 <HAL_Init+0x40>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 f931 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237e:	200f      	movs	r0, #15
 8002380:	f000 f808 	bl	8002394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002384:	f7ff fbde 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00

08002394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_InitTick+0x54>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <HAL_InitTick+0x58>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f93b 	bl	800262e <HAL_SYSTICK_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00e      	b.n	80023e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d80a      	bhi.n	80023de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c8:	2200      	movs	r2, #0
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f000 f911 	bl	80025f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d4:	4a06      	ldr	r2, [pc, #24]	@ (80023f0 <HAL_InitTick+0x5c>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000008 	.word	0x20000008
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_IncTick+0x20>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_IncTick+0x24>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <HAL_IncTick+0x24>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000008 	.word	0x20000008
 8002418:	20000728 	.word	0x20000728

0800241c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <HAL_GetTick+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000728 	.word	0x20000728

08002434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff ffee 	bl	800241c <HAL_GetTick>
 8002440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d005      	beq.n	800245a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244e:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <HAL_Delay+0x44>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800245a:	bf00      	nop
 800245c:	f7ff ffde 	bl	800241c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	d8f7      	bhi.n	800245c <HAL_Delay+0x28>
  {
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000008 	.word	0x20000008

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	@ (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	@ (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	@ 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	@ 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f7ff ff8e 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff47 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002608:	f7ff ff5c 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 800260c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ff8e 	bl	8002534 <NVIC_EncodePriority>
 8002618:	4602      	mov	r2, r0
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff5d 	bl	80024e0 <__NVIC_SetPriority>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff ffb0 	bl	800259c <SysTick_Config>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	e16b      	b.n	800293c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002664:	2201      	movs	r2, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	429a      	cmp	r2, r3
 800267e:	f040 815a 	bne.w	8002936 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d005      	beq.n	800269a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002696:	2b02      	cmp	r3, #2
 8002698:	d130      	bne.n	80026fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 0201 	and.w	r2, r3, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b03      	cmp	r3, #3
 8002706:	d017      	beq.n	8002738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d123      	bne.n	800278c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	08da      	lsrs	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3208      	adds	r2, #8
 800274c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	220f      	movs	r2, #15
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	08da      	lsrs	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3208      	adds	r2, #8
 8002786:	69b9      	ldr	r1, [r7, #24]
 8002788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0203 	and.w	r2, r3, #3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80b4 	beq.w	8002936 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b60      	ldr	r3, [pc, #384]	@ (8002954 <HAL_GPIO_Init+0x30c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002954 <HAL_GPIO_Init+0x30c>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027de:	4b5d      	ldr	r3, [pc, #372]	@ (8002954 <HAL_GPIO_Init+0x30c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002958 <HAL_GPIO_Init+0x310>)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3302      	adds	r3, #2
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	220f      	movs	r2, #15
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a52      	ldr	r2, [pc, #328]	@ (800295c <HAL_GPIO_Init+0x314>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d02b      	beq.n	800286e <HAL_GPIO_Init+0x226>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a51      	ldr	r2, [pc, #324]	@ (8002960 <HAL_GPIO_Init+0x318>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d025      	beq.n	800286a <HAL_GPIO_Init+0x222>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a50      	ldr	r2, [pc, #320]	@ (8002964 <HAL_GPIO_Init+0x31c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01f      	beq.n	8002866 <HAL_GPIO_Init+0x21e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4f      	ldr	r2, [pc, #316]	@ (8002968 <HAL_GPIO_Init+0x320>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d019      	beq.n	8002862 <HAL_GPIO_Init+0x21a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4e      	ldr	r2, [pc, #312]	@ (800296c <HAL_GPIO_Init+0x324>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_GPIO_Init+0x216>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4d      	ldr	r2, [pc, #308]	@ (8002970 <HAL_GPIO_Init+0x328>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00d      	beq.n	800285a <HAL_GPIO_Init+0x212>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4c      	ldr	r2, [pc, #304]	@ (8002974 <HAL_GPIO_Init+0x32c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <HAL_GPIO_Init+0x20e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4b      	ldr	r2, [pc, #300]	@ (8002978 <HAL_GPIO_Init+0x330>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d101      	bne.n	8002852 <HAL_GPIO_Init+0x20a>
 800284e:	2307      	movs	r3, #7
 8002850:	e00e      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002852:	2308      	movs	r3, #8
 8002854:	e00c      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002856:	2306      	movs	r3, #6
 8002858:	e00a      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800285a:	2305      	movs	r3, #5
 800285c:	e008      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800285e:	2304      	movs	r3, #4
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800286e:	2300      	movs	r3, #0
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002880:	4935      	ldr	r1, [pc, #212]	@ (8002958 <HAL_GPIO_Init+0x310>)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288e:	4b3b      	ldr	r3, [pc, #236]	@ (800297c <HAL_GPIO_Init+0x334>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b2:	4a32      	ldr	r2, [pc, #200]	@ (800297c <HAL_GPIO_Init+0x334>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b8:	4b30      	ldr	r3, [pc, #192]	@ (800297c <HAL_GPIO_Init+0x334>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028dc:	4a27      	ldr	r2, [pc, #156]	@ (800297c <HAL_GPIO_Init+0x334>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e2:	4b26      	ldr	r3, [pc, #152]	@ (800297c <HAL_GPIO_Init+0x334>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002906:	4a1d      	ldr	r2, [pc, #116]	@ (800297c <HAL_GPIO_Init+0x334>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <HAL_GPIO_Init+0x334>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002930:	4a12      	ldr	r2, [pc, #72]	@ (800297c <HAL_GPIO_Init+0x334>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	f67f ae90 	bls.w	8002664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3724      	adds	r7, #36	@ 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40013800 	.word	0x40013800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40021400 	.word	0x40021400
 8002974:	40021800 	.word	0x40021800
 8002978:	40021c00 	.word	0x40021c00
 800297c:	40013c00 	.word	0x40013c00

08002980 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	887b      	ldrh	r3, [r7, #2]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e001      	b.n	80029a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
 80029bc:	4613      	mov	r3, r2
 80029be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c0:	787b      	ldrb	r3, [r7, #1]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029cc:	e003      	b.n	80029d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ce:	887b      	ldrh	r3, [r7, #2]
 80029d0:	041a      	lsls	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	619a      	str	r2, [r3, #24]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e12b      	b.n	8002c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe ff44 	bl	8001898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	@ 0x24
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a48:	f001 fc20 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8002a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a81      	ldr	r2, [pc, #516]	@ (8002c58 <HAL_I2C_Init+0x274>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d807      	bhi.n	8002a68 <HAL_I2C_Init+0x84>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a80      	ldr	r2, [pc, #512]	@ (8002c5c <HAL_I2C_Init+0x278>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	bf94      	ite	ls
 8002a60:	2301      	movls	r3, #1
 8002a62:	2300      	movhi	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e006      	b.n	8002a76 <HAL_I2C_Init+0x92>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c60 <HAL_I2C_Init+0x27c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	bf94      	ite	ls
 8002a70:	2301      	movls	r3, #1
 8002a72:	2300      	movhi	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0e7      	b.n	8002c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a78      	ldr	r2, [pc, #480]	@ (8002c64 <HAL_I2C_Init+0x280>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0c9b      	lsrs	r3, r3, #18
 8002a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a6a      	ldr	r2, [pc, #424]	@ (8002c58 <HAL_I2C_Init+0x274>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d802      	bhi.n	8002ab8 <HAL_I2C_Init+0xd4>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	e009      	b.n	8002acc <HAL_I2C_Init+0xe8>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	4a69      	ldr	r2, [pc, #420]	@ (8002c68 <HAL_I2C_Init+0x284>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	099b      	lsrs	r3, r3, #6
 8002aca:	3301      	adds	r3, #1
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ade:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	495c      	ldr	r1, [pc, #368]	@ (8002c58 <HAL_I2C_Init+0x274>)
 8002ae8:	428b      	cmp	r3, r1
 8002aea:	d819      	bhi.n	8002b20 <HAL_I2C_Init+0x13c>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e59      	subs	r1, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002afa:	1c59      	adds	r1, r3, #1
 8002afc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b00:	400b      	ands	r3, r1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_I2C_Init+0x138>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e59      	subs	r1, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1a:	e051      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e04f      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d111      	bne.n	8002b4c <HAL_I2C_Init+0x168>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1e58      	subs	r0, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	440b      	add	r3, r1
 8002b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e012      	b.n	8002b72 <HAL_I2C_Init+0x18e>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	0099      	lsls	r1, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Init+0x196>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e022      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10e      	bne.n	8002ba0 <HAL_I2C_Init+0x1bc>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1e58      	subs	r0, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	440b      	add	r3, r1
 8002b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b9e:	e00f      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e58      	subs	r0, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	0099      	lsls	r1, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	6809      	ldr	r1, [r1, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6911      	ldr	r1, [r2, #16]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68d2      	ldr	r2, [r2, #12]
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	000186a0 	.word	0x000186a0
 8002c5c:	001e847f 	.word	0x001e847f
 8002c60:	003d08ff 	.word	0x003d08ff
 8002c64:	431bde83 	.word	0x431bde83
 8002c68:	10624dd3 	.word	0x10624dd3

08002c6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	4608      	mov	r0, r1
 8002c76:	4611      	mov	r1, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	813b      	strh	r3, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c86:	f7ff fbc9 	bl	800241c <HAL_GetTick>
 8002c8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	f040 80d9 	bne.w	8002e4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2319      	movs	r3, #25
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	496d      	ldr	r1, [pc, #436]	@ (8002e58 <HAL_I2C_Mem_Write+0x1ec>)
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fc8b 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e0cc      	b.n	8002e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2C_Mem_Write+0x56>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0c5      	b.n	8002e4e <HAL_I2C_Mem_Write+0x1e2>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d007      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2221      	movs	r2, #33	@ 0x21
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2240      	movs	r2, #64	@ 0x40
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a3a      	ldr	r2, [r7, #32]
 8002d12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a4d      	ldr	r2, [pc, #308]	@ (8002e5c <HAL_I2C_Mem_Write+0x1f0>)
 8002d28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d2a:	88f8      	ldrh	r0, [r7, #6]
 8002d2c:	893a      	ldrh	r2, [r7, #8]
 8002d2e:	8979      	ldrh	r1, [r7, #10]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	4603      	mov	r3, r0
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fac2 	bl	80032c4 <I2C_RequestMemoryWrite>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d052      	beq.n	8002dec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e081      	b.n	8002e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fd50 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d107      	bne.n	8002d72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06b      	b.n	8002e4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	781a      	ldrb	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d11b      	bne.n	8002dec <HAL_I2C_Mem_Write+0x180>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d017      	beq.n	8002dec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1aa      	bne.n	8002d4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fd43 	bl	8003884 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d107      	bne.n	8002e1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e016      	b.n	8002e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e000      	b.n	8002e4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e4c:	2302      	movs	r3, #2
  }
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	00100002 	.word	0x00100002
 8002e5c:	ffff0000 	.word	0xffff0000

08002e60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08c      	sub	sp, #48	@ 0x30
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	817b      	strh	r3, [r7, #10]
 8002e72:	460b      	mov	r3, r1
 8002e74:	813b      	strh	r3, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e7a:	f7ff facf 	bl	800241c <HAL_GetTick>
 8002e7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	f040 8214 	bne.w	80032b6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2319      	movs	r3, #25
 8002e94:	2201      	movs	r2, #1
 8002e96:	497b      	ldr	r1, [pc, #492]	@ (8003084 <HAL_I2C_Mem_Read+0x224>)
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fb91 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e207      	b.n	80032b8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_Mem_Read+0x56>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e200      	b.n	80032b8 <HAL_I2C_Mem_Read+0x458>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d007      	beq.n	8002edc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2222      	movs	r2, #34	@ 0x22
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2240      	movs	r2, #64	@ 0x40
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003088 <HAL_I2C_Mem_Read+0x228>)
 8002f1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f1e:	88f8      	ldrh	r0, [r7, #6]
 8002f20:	893a      	ldrh	r2, [r7, #8]
 8002f22:	8979      	ldrh	r1, [r7, #10]
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fa5e 	bl	80033f0 <I2C_RequestMemoryRead>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e1bc      	b.n	80032b8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d113      	bne.n	8002f6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e190      	b.n	8003290 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d11b      	bne.n	8002fae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e170      	b.n	8003290 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d11b      	bne.n	8002fee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	e150      	b.n	8003290 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003004:	e144      	b.n	8003290 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300a:	2b03      	cmp	r3, #3
 800300c:	f200 80f1 	bhi.w	80031f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	2b01      	cmp	r3, #1
 8003016:	d123      	bne.n	8003060 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fc79 	bl	8003914 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e145      	b.n	80032b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800305e:	e117      	b.n	8003290 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003064:	2b02      	cmp	r3, #2
 8003066:	d14e      	bne.n	8003106 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306e:	2200      	movs	r2, #0
 8003070:	4906      	ldr	r1, [pc, #24]	@ (800308c <HAL_I2C_Mem_Read+0x22c>)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 faa4 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e11a      	b.n	80032b8 <HAL_I2C_Mem_Read+0x458>
 8003082:	bf00      	nop
 8003084:	00100002 	.word	0x00100002
 8003088:	ffff0000 	.word	0xffff0000
 800308c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800309e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003104:	e0c4      	b.n	8003290 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310c:	2200      	movs	r2, #0
 800310e:	496c      	ldr	r1, [pc, #432]	@ (80032c0 <HAL_I2C_Mem_Read+0x460>)
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 fa55 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0cb      	b.n	80032b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800312e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003168:	2200      	movs	r2, #0
 800316a:	4955      	ldr	r1, [pc, #340]	@ (80032c0 <HAL_I2C_Mem_Read+0x460>)
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fa27 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e09d      	b.n	80032b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031f0:	e04e      	b.n	8003290 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fb8c 	bl	8003914 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e058      	b.n	80032b8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b04      	cmp	r3, #4
 8003244:	d124      	bne.n	8003290 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324a:	2b03      	cmp	r3, #3
 800324c:	d107      	bne.n	800325e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800325c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003294:	2b00      	cmp	r3, #0
 8003296:	f47f aeb6 	bne.w	8003006 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e000      	b.n	80032b8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
  }
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3728      	adds	r7, #40	@ 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	00010004 	.word	0x00010004

080032c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	460b      	mov	r3, r1
 80032d8:	813b      	strh	r3, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f960 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003314:	d103      	bne.n	800331e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e05f      	b.n	80033e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003330:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	6a3a      	ldr	r2, [r7, #32]
 8003336:	492d      	ldr	r1, [pc, #180]	@ (80033ec <I2C_RequestMemoryWrite+0x128>)
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f9bb 	bl	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e04c      	b.n	80033e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003360:	6a39      	ldr	r1, [r7, #32]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fa46 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	2b04      	cmp	r3, #4
 8003374:	d107      	bne.n	8003386 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003384:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e02b      	b.n	80033e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003390:	893b      	ldrh	r3, [r7, #8]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	e021      	b.n	80033e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa20 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d107      	bne.n	80033d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e005      	b.n	80033e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033d6:	893b      	ldrh	r3, [r7, #8]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	00010002 	.word	0x00010002

080033f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	460b      	mov	r3, r1
 8003404:	813b      	strh	r3, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003418:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	2200      	movs	r2, #0
 8003432:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f8c2 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003450:	d103      	bne.n	800345a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e0aa      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800346c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	6a3a      	ldr	r2, [r7, #32]
 8003472:	4952      	ldr	r1, [pc, #328]	@ (80035bc <I2C_RequestMemoryRead+0x1cc>)
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f91d 	bl	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e097      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349c:	6a39      	ldr	r1, [r7, #32]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f9a8 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d107      	bne.n	80034c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e076      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034cc:	893b      	ldrh	r3, [r7, #8]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	e021      	b.n	800351c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034d8:	893b      	ldrh	r3, [r7, #8]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	b29b      	uxth	r3, r3
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e8:	6a39      	ldr	r1, [r7, #32]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f982 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d107      	bne.n	800350e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e050      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003512:	893b      	ldrh	r3, [r7, #8]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351e:	6a39      	ldr	r1, [r7, #32]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f967 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	2b04      	cmp	r3, #4
 8003532:	d107      	bne.n	8003544 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003542:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e035      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003556:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	2200      	movs	r2, #0
 8003560:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f82b 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800357e:	d103      	bne.n	8003588 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e013      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800358c:	897b      	ldrh	r3, [r7, #10]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	6a3a      	ldr	r2, [r7, #32]
 80035a0:	4906      	ldr	r1, [pc, #24]	@ (80035bc <I2C_RequestMemoryRead+0x1cc>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f886 	bl	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	00010002 	.word	0x00010002

080035c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d0:	e048      	b.n	8003664 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d044      	beq.n	8003664 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035da:	f7fe ff1f 	bl	800241c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d302      	bcc.n	80035f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d139      	bne.n	8003664 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10d      	bne.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	43da      	mvns	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4013      	ands	r3, r2
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	e00c      	b.n	8003630 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	43da      	mvns	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	429a      	cmp	r2, r3
 8003634:	d116      	bne.n	8003664 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	f043 0220 	orr.w	r2, r3, #32
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e023      	b.n	80036ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	0c1b      	lsrs	r3, r3, #16
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d10d      	bne.n	800368a <I2C_WaitOnFlagUntilTimeout+0xca>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	43da      	mvns	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	4013      	ands	r3, r2
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	e00c      	b.n	80036a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	43da      	mvns	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d093      	beq.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036c2:	e071      	b.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d2:	d123      	bne.n	800371c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	f043 0204 	orr.w	r2, r3, #4
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e067      	b.n	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d041      	beq.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003724:	f7fe fe7a 	bl	800241c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	d302      	bcc.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d136      	bne.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d10c      	bne.n	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf14      	ite	ne
 8003756:	2301      	movne	r3, #1
 8003758:	2300      	moveq	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e00b      	b.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	43da      	mvns	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4013      	ands	r3, r2
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e021      	b.n	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	0c1b      	lsrs	r3, r3, #16
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10c      	bne.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	43da      	mvns	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e00b      	b.n	80037e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f47f af6d 	bne.w	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003800:	e034      	b.n	800386c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f8e3 	bl	80039ce <I2C_IsAcknowledgeFailed>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e034      	b.n	800387c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d028      	beq.n	800386c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7fe fdff 	bl	800241c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d11d      	bne.n	800386c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383a:	2b80      	cmp	r3, #128	@ 0x80
 800383c:	d016      	beq.n	800386c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e007      	b.n	800387c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	2b80      	cmp	r3, #128	@ 0x80
 8003878:	d1c3      	bne.n	8003802 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003890:	e034      	b.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f89b 	bl	80039ce <I2C_IsAcknowledgeFailed>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e034      	b.n	800390c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d028      	beq.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7fe fdb7 	bl	800241c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11d      	bne.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d016      	beq.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d1c3      	bne.n	8003892 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003920:	e049      	b.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b10      	cmp	r3, #16
 800392e:	d119      	bne.n	8003964 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0210 	mvn.w	r2, #16
 8003938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e030      	b.n	80039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003964:	f7fe fd5a 	bl	800241c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	429a      	cmp	r2, r3
 8003972:	d302      	bcc.n	800397a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11d      	bne.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003984:	2b40      	cmp	r3, #64	@ 0x40
 8003986:	d016      	beq.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e007      	b.n	80039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	2b40      	cmp	r3, #64	@ 0x40
 80039c2:	d1ae      	bne.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e4:	d11b      	bne.n	8003a1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	f043 0204 	orr.w	r2, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e267      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d075      	beq.n	8003b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a4a:	4b88      	ldr	r3, [pc, #544]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d00c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a56:	4b85      	ldr	r3, [pc, #532]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d112      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a62:	4b82      	ldr	r3, [pc, #520]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	4b7e      	ldr	r3, [pc, #504]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d05b      	beq.n	8003b34 <HAL_RCC_OscConfig+0x108>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d157      	bne.n	8003b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e242      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x74>
 8003a92:	4b76      	ldr	r3, [pc, #472]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a75      	ldr	r2, [pc, #468]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x98>
 8003aaa:	4b70      	ldr	r3, [pc, #448]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6f      	ldr	r2, [pc, #444]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6c      	ldr	r2, [pc, #432]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003ac4:	4b69      	ldr	r3, [pc, #420]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a68      	ldr	r2, [pc, #416]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b66      	ldr	r3, [pc, #408]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a65      	ldr	r2, [pc, #404]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fc9a 	bl	800241c <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe fc96 	bl	800241c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	@ 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e207      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b5b      	ldr	r3, [pc, #364]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xc0>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fc86 	bl	800241c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fe fc82 	bl	800241c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1f3      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	4b51      	ldr	r3, [pc, #324]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0xe8>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b42:	4b4a      	ldr	r3, [pc, #296]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4e:	4b47      	ldr	r3, [pc, #284]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5a:	4b44      	ldr	r3, [pc, #272]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	4b41      	ldr	r3, [pc, #260]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1c7      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4937      	ldr	r1, [pc, #220]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	e03a      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b34      	ldr	r3, [pc, #208]	@ (8003c70 <HAL_RCC_OscConfig+0x244>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fe fc3b 	bl	800241c <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fe fc37 	bl	800241c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1a8      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b28      	ldr	r3, [pc, #160]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4925      	ldr	r1, [pc, #148]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bde:	4b24      	ldr	r3, [pc, #144]	@ (8003c70 <HAL_RCC_OscConfig+0x244>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe fc1a 	bl	800241c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe fc16 	bl	800241c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e187      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d036      	beq.n	8003c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b15      	ldr	r3, [pc, #84]	@ (8003c74 <HAL_RCC_OscConfig+0x248>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fe fbfa 	bl	800241c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fe fbf6 	bl	800241c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e167      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x200>
 8003c4a:	e01b      	b.n	8003c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <HAL_RCC_OscConfig+0x248>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c52:	f7fe fbe3 	bl	800241c <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	e00e      	b.n	8003c78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7fe fbdf 	bl	800241c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d907      	bls.n	8003c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e150      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	42470000 	.word	0x42470000
 8003c74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	4b88      	ldr	r3, [pc, #544]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ea      	bne.n	8003c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8097 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c96:	4b81      	ldr	r3, [pc, #516]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	4a7c      	ldr	r2, [pc, #496]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b77      	ldr	r3, [pc, #476]	@ (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d118      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cce:	4b74      	ldr	r3, [pc, #464]	@ (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a73      	ldr	r2, [pc, #460]	@ (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fe fb9f 	bl	800241c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fe fb9b 	bl	800241c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e10c      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2ea>
 8003d08:	4b64      	ldr	r3, [pc, #400]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0c:	4a63      	ldr	r2, [pc, #396]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d14:	e01c      	b.n	8003d50 <HAL_RCC_OscConfig+0x324>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x30c>
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	4a5e      	ldr	r2, [pc, #376]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0x324>
 8003d38:	4b58      	ldr	r3, [pc, #352]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3c:	4a57      	ldr	r2, [pc, #348]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d44:	4b55      	ldr	r3, [pc, #340]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	4a54      	ldr	r2, [pc, #336]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f023 0304 	bic.w	r3, r3, #4
 8003d4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fe fb60 	bl	800241c <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fe fb5c 	bl	800241c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0cb      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	4b49      	ldr	r3, [pc, #292]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ee      	beq.n	8003d60 <HAL_RCC_OscConfig+0x334>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d84:	f7fe fb4a 	bl	800241c <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fe fb46 	bl	800241c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0b5      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da2:	4b3e      	ldr	r3, [pc, #248]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ee      	bne.n	8003d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	4a38      	ldr	r2, [pc, #224]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a1 	beq.w	8003f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dca:	4b34      	ldr	r3, [pc, #208]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d05c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d141      	bne.n	8003e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dde:	4b31      	ldr	r3, [pc, #196]	@ (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe fb1a 	bl	800241c <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe fb16 	bl	800241c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e087      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b27      	ldr	r3, [pc, #156]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	019b      	lsls	r3, r3, #6
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	3b01      	subs	r3, #1
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	491b      	ldr	r1, [pc, #108]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fe faef 	bl	800241c <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fe faeb 	bl	800241c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e05c      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e54:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x416>
 8003e60:	e054      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e62:	4b10      	ldr	r3, [pc, #64]	@ (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe fad8 	bl	800241c <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fe fad4 	bl	800241c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e045      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x444>
 8003e8e:	e03d      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e038      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40007000 	.word	0x40007000
 8003ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f18 <HAL_RCC_OscConfig+0x4ec>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d121      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d11a      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d111      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800

08003f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0cc      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f30:	4b68      	ldr	r3, [pc, #416]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d90c      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b65      	ldr	r3, [pc, #404]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b63      	ldr	r3, [pc, #396]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0b8      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d020      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f70:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a58      	ldr	r2, [pc, #352]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f88:	4b53      	ldr	r3, [pc, #332]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a52      	ldr	r2, [pc, #328]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f94:	4b50      	ldr	r3, [pc, #320]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	494d      	ldr	r1, [pc, #308]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d044      	beq.n	800403c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d119      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e07f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	4b3f      	ldr	r3, [pc, #252]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e06f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fea:	4b3b      	ldr	r3, [pc, #236]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e067      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b37      	ldr	r3, [pc, #220]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4934      	ldr	r1, [pc, #208]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800400c:	f7fe fa06 	bl	800241c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7fe fa02 	bl	800241c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e04f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800403c:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d20c      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b22      	ldr	r3, [pc, #136]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b20      	ldr	r3, [pc, #128]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e032      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4916      	ldr	r1, [pc, #88]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408e:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	490e      	ldr	r1, [pc, #56]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040a2:	f000 f821 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	490a      	ldr	r1, [pc, #40]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	5ccb      	ldrb	r3, [r1, r3]
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	4a09      	ldr	r2, [pc, #36]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe f966 	bl	8002394 <HAL_InitTick>

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023c00 	.word	0x40023c00
 80040d8:	40023800 	.word	0x40023800
 80040dc:	08005648 	.word	0x08005648
 80040e0:	20000000 	.word	0x20000000
 80040e4:	20000004 	.word	0x20000004

080040e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b090      	sub	sp, #64	@ 0x40
 80040ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f4:	2300      	movs	r3, #0
 80040f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f8:	2300      	movs	r3, #0
 80040fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004100:	4b59      	ldr	r3, [pc, #356]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d00d      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x40>
 800410c:	2b08      	cmp	r3, #8
 800410e:	f200 80a1 	bhi.w	8004254 <HAL_RCC_GetSysClockFreq+0x16c>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x34>
 8004116:	2b04      	cmp	r3, #4
 8004118:	d003      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x3a>
 800411a:	e09b      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b53      	ldr	r3, [pc, #332]	@ (800426c <HAL_RCC_GetSysClockFreq+0x184>)
 800411e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004120:	e09b      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004122:	4b53      	ldr	r3, [pc, #332]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x188>)
 8004124:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004126:	e098      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004128:	4b4f      	ldr	r3, [pc, #316]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004130:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004132:	4b4d      	ldr	r3, [pc, #308]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d028      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413e:	4b4a      	ldr	r3, [pc, #296]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	2200      	movs	r2, #0
 8004146:	623b      	str	r3, [r7, #32]
 8004148:	627a      	str	r2, [r7, #36]	@ 0x24
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004150:	2100      	movs	r1, #0
 8004152:	4b47      	ldr	r3, [pc, #284]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x188>)
 8004154:	fb03 f201 	mul.w	r2, r3, r1
 8004158:	2300      	movs	r3, #0
 800415a:	fb00 f303 	mul.w	r3, r0, r3
 800415e:	4413      	add	r3, r2
 8004160:	4a43      	ldr	r2, [pc, #268]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x188>)
 8004162:	fba0 1202 	umull	r1, r2, r0, r2
 8004166:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004168:	460a      	mov	r2, r1
 800416a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800416c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800416e:	4413      	add	r3, r2
 8004170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004174:	2200      	movs	r2, #0
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	61fa      	str	r2, [r7, #28]
 800417a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800417e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004182:	f7fc fc6b 	bl	8000a5c <__aeabi_uldivmod>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4613      	mov	r3, r2
 800418c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800418e:	e053      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004190:	4b35      	ldr	r3, [pc, #212]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	2200      	movs	r2, #0
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	617a      	str	r2, [r7, #20]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041a2:	f04f 0b00 	mov.w	fp, #0
 80041a6:	4652      	mov	r2, sl
 80041a8:	465b      	mov	r3, fp
 80041aa:	f04f 0000 	mov.w	r0, #0
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	0159      	lsls	r1, r3, #5
 80041b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b8:	0150      	lsls	r0, r2, #5
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	ebb2 080a 	subs.w	r8, r2, sl
 80041c2:	eb63 090b 	sbc.w	r9, r3, fp
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041da:	ebb2 0408 	subs.w	r4, r2, r8
 80041de:	eb63 0509 	sbc.w	r5, r3, r9
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	00eb      	lsls	r3, r5, #3
 80041ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f0:	00e2      	lsls	r2, r4, #3
 80041f2:	4614      	mov	r4, r2
 80041f4:	461d      	mov	r5, r3
 80041f6:	eb14 030a 	adds.w	r3, r4, sl
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	eb45 030b 	adc.w	r3, r5, fp
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800420e:	4629      	mov	r1, r5
 8004210:	028b      	lsls	r3, r1, #10
 8004212:	4621      	mov	r1, r4
 8004214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004218:	4621      	mov	r1, r4
 800421a:	028a      	lsls	r2, r1, #10
 800421c:	4610      	mov	r0, r2
 800421e:	4619      	mov	r1, r3
 8004220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004222:	2200      	movs	r2, #0
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	60fa      	str	r2, [r7, #12]
 8004228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800422c:	f7fc fc16 	bl	8000a5c <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4613      	mov	r3, r2
 8004236:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004238:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	3301      	adds	r3, #1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004248:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004252:	e002      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <HAL_RCC_GetSysClockFreq+0x184>)
 8004256:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800425c:	4618      	mov	r0, r3
 800425e:	3740      	adds	r7, #64	@ 0x40
 8004260:	46bd      	mov	sp, r7
 8004262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800
 800426c:	00f42400 	.word	0x00f42400
 8004270:	017d7840 	.word	0x017d7840

08004274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004278:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <HAL_RCC_GetHCLKFreq+0x14>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000000 	.word	0x20000000

0800428c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004290:	f7ff fff0 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	0a9b      	lsrs	r3, r3, #10
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	4903      	ldr	r1, [pc, #12]	@ (80042b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40023800 	.word	0x40023800
 80042b0:	08005658 	.word	0x08005658

080042b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042b8:	f7ff ffdc 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0b5b      	lsrs	r3, r3, #13
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4903      	ldr	r1, [pc, #12]	@ (80042d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	08005658 	.word	0x08005658

080042dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e042      	b.n	8004374 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd fce8 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	@ 0x24
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800431e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f973 	bl	800460c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	@ 0x28
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b20      	cmp	r3, #32
 800439a:	d175      	bne.n	8004488 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_UART_Transmit+0x2c>
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e06e      	b.n	800448a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2221      	movs	r2, #33	@ 0x21
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ba:	f7fe f82f 	bl	800241c <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	88fa      	ldrh	r2, [r7, #6]
 80043ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d4:	d108      	bne.n	80043e8 <HAL_UART_Transmit+0x6c>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	e003      	b.n	80043f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043f0:	e02e      	b.n	8004450 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2180      	movs	r1, #128	@ 0x80
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f848 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e03a      	b.n	800448a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004428:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	3302      	adds	r3, #2
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e007      	b.n	8004442 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	3301      	adds	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1cb      	bne.n	80043f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2200      	movs	r2, #0
 8004462:	2140      	movs	r1, #64	@ 0x40
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f814 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e006      	b.n	800448a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	e000      	b.n	800448a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004488:	2302      	movs	r3, #2
  }
}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a2:	e03b      	b.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d037      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fd ffb6 	bl	800241c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	6a3a      	ldr	r2, [r7, #32]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e03a      	b.n	800453c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d023      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d020      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b40      	cmp	r3, #64	@ 0x40
 80044de:	d01d      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d116      	bne.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f81d 	bl	8004544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2208      	movs	r2, #8
 800450e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e00f      	b.n	800453c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4013      	ands	r3, r2
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	429a      	cmp	r2, r3
 8004538:	d0b4      	beq.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b095      	sub	sp, #84	@ 0x54
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800456c:	643a      	str	r2, [r7, #64]	@ 0x40
 800456e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800457a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e5      	bne.n	800454c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3314      	adds	r3, #20
 8004586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3314      	adds	r3, #20
 800459e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e5      	bne.n	8004580 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d119      	bne.n	80045f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f023 0310 	bic.w	r3, r3, #16
 80045d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045dc:	61ba      	str	r2, [r7, #24]
 80045de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6979      	ldr	r1, [r7, #20]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e5      	bne.n	80045bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045fe:	bf00      	nop
 8004600:	3754      	adds	r7, #84	@ 0x54
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800460c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004610:	b0c0      	sub	sp, #256	@ 0x100
 8004612:	af00      	add	r7, sp, #0
 8004614:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	68d9      	ldr	r1, [r3, #12]
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	ea40 0301 	orr.w	r3, r0, r1
 8004634:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	431a      	orrs	r2, r3
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	431a      	orrs	r2, r3
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004664:	f021 010c 	bic.w	r1, r1, #12
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004672:	430b      	orrs	r3, r1
 8004674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004686:	6999      	ldr	r1, [r3, #24]
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	ea40 0301 	orr.w	r3, r0, r1
 8004692:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4b8f      	ldr	r3, [pc, #572]	@ (80048d8 <UART_SetConfig+0x2cc>)
 800469c:	429a      	cmp	r2, r3
 800469e:	d005      	beq.n	80046ac <UART_SetConfig+0xa0>
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b8d      	ldr	r3, [pc, #564]	@ (80048dc <UART_SetConfig+0x2d0>)
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d104      	bne.n	80046b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046ac:	f7ff fe02 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 80046b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046b4:	e003      	b.n	80046be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046b6:	f7ff fde9 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 80046ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c8:	f040 810c 	bne.w	80048e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046de:	4622      	mov	r2, r4
 80046e0:	462b      	mov	r3, r5
 80046e2:	1891      	adds	r1, r2, r2
 80046e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046e6:	415b      	adcs	r3, r3
 80046e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046ee:	4621      	mov	r1, r4
 80046f0:	eb12 0801 	adds.w	r8, r2, r1
 80046f4:	4629      	mov	r1, r5
 80046f6:	eb43 0901 	adc.w	r9, r3, r1
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800470a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800470e:	4690      	mov	r8, r2
 8004710:	4699      	mov	r9, r3
 8004712:	4623      	mov	r3, r4
 8004714:	eb18 0303 	adds.w	r3, r8, r3
 8004718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800471c:	462b      	mov	r3, r5
 800471e:	eb49 0303 	adc.w	r3, r9, r3
 8004722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004732:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004736:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800473a:	460b      	mov	r3, r1
 800473c:	18db      	adds	r3, r3, r3
 800473e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004740:	4613      	mov	r3, r2
 8004742:	eb42 0303 	adc.w	r3, r2, r3
 8004746:	657b      	str	r3, [r7, #84]	@ 0x54
 8004748:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800474c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004750:	f7fc f984 	bl	8000a5c <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4b61      	ldr	r3, [pc, #388]	@ (80048e0 <UART_SetConfig+0x2d4>)
 800475a:	fba3 2302 	umull	r2, r3, r3, r2
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	011c      	lsls	r4, r3, #4
 8004762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800476c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004770:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	1891      	adds	r1, r2, r2
 800477a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800477c:	415b      	adcs	r3, r3
 800477e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004780:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004784:	4641      	mov	r1, r8
 8004786:	eb12 0a01 	adds.w	sl, r2, r1
 800478a:	4649      	mov	r1, r9
 800478c:	eb43 0b01 	adc.w	fp, r3, r1
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800479c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047a4:	4692      	mov	sl, r2
 80047a6:	469b      	mov	fp, r3
 80047a8:	4643      	mov	r3, r8
 80047aa:	eb1a 0303 	adds.w	r3, sl, r3
 80047ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047b2:	464b      	mov	r3, r9
 80047b4:	eb4b 0303 	adc.w	r3, fp, r3
 80047b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047d0:	460b      	mov	r3, r1
 80047d2:	18db      	adds	r3, r3, r3
 80047d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80047d6:	4613      	mov	r3, r2
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80047de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047e6:	f7fc f939 	bl	8000a5c <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4611      	mov	r1, r2
 80047f0:	4b3b      	ldr	r3, [pc, #236]	@ (80048e0 <UART_SetConfig+0x2d4>)
 80047f2:	fba3 2301 	umull	r2, r3, r3, r1
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2264      	movs	r2, #100	@ 0x64
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	1acb      	subs	r3, r1, r3
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004806:	4b36      	ldr	r3, [pc, #216]	@ (80048e0 <UART_SetConfig+0x2d4>)
 8004808:	fba3 2302 	umull	r2, r3, r3, r2
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004814:	441c      	add	r4, r3
 8004816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800481a:	2200      	movs	r2, #0
 800481c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004820:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004824:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004828:	4642      	mov	r2, r8
 800482a:	464b      	mov	r3, r9
 800482c:	1891      	adds	r1, r2, r2
 800482e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004830:	415b      	adcs	r3, r3
 8004832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004834:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004838:	4641      	mov	r1, r8
 800483a:	1851      	adds	r1, r2, r1
 800483c:	6339      	str	r1, [r7, #48]	@ 0x30
 800483e:	4649      	mov	r1, r9
 8004840:	414b      	adcs	r3, r1
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004850:	4659      	mov	r1, fp
 8004852:	00cb      	lsls	r3, r1, #3
 8004854:	4651      	mov	r1, sl
 8004856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800485a:	4651      	mov	r1, sl
 800485c:	00ca      	lsls	r2, r1, #3
 800485e:	4610      	mov	r0, r2
 8004860:	4619      	mov	r1, r3
 8004862:	4603      	mov	r3, r0
 8004864:	4642      	mov	r2, r8
 8004866:	189b      	adds	r3, r3, r2
 8004868:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800486c:	464b      	mov	r3, r9
 800486e:	460a      	mov	r2, r1
 8004870:	eb42 0303 	adc.w	r3, r2, r3
 8004874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004884:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004888:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800488c:	460b      	mov	r3, r1
 800488e:	18db      	adds	r3, r3, r3
 8004890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004892:	4613      	mov	r3, r2
 8004894:	eb42 0303 	adc.w	r3, r2, r3
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800489a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800489e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80048a2:	f7fc f8db 	bl	8000a5c <__aeabi_uldivmod>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <UART_SetConfig+0x2d4>)
 80048ac:	fba3 1302 	umull	r1, r3, r3, r2
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	2164      	movs	r1, #100	@ 0x64
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	3332      	adds	r3, #50	@ 0x32
 80048be:	4a08      	ldr	r2, [pc, #32]	@ (80048e0 <UART_SetConfig+0x2d4>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	f003 0207 	and.w	r2, r3, #7
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4422      	add	r2, r4
 80048d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048d4:	e106      	b.n	8004ae4 <UART_SetConfig+0x4d8>
 80048d6:	bf00      	nop
 80048d8:	40011000 	.word	0x40011000
 80048dc:	40011400 	.word	0x40011400
 80048e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048f6:	4642      	mov	r2, r8
 80048f8:	464b      	mov	r3, r9
 80048fa:	1891      	adds	r1, r2, r2
 80048fc:	6239      	str	r1, [r7, #32]
 80048fe:	415b      	adcs	r3, r3
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
 8004902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004906:	4641      	mov	r1, r8
 8004908:	1854      	adds	r4, r2, r1
 800490a:	4649      	mov	r1, r9
 800490c:	eb43 0501 	adc.w	r5, r3, r1
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	00eb      	lsls	r3, r5, #3
 800491a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800491e:	00e2      	lsls	r2, r4, #3
 8004920:	4614      	mov	r4, r2
 8004922:	461d      	mov	r5, r3
 8004924:	4643      	mov	r3, r8
 8004926:	18e3      	adds	r3, r4, r3
 8004928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800492c:	464b      	mov	r3, r9
 800492e:	eb45 0303 	adc.w	r3, r5, r3
 8004932:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004942:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004952:	4629      	mov	r1, r5
 8004954:	008b      	lsls	r3, r1, #2
 8004956:	4621      	mov	r1, r4
 8004958:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800495c:	4621      	mov	r1, r4
 800495e:	008a      	lsls	r2, r1, #2
 8004960:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004964:	f7fc f87a 	bl	8000a5c <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4b60      	ldr	r3, [pc, #384]	@ (8004af0 <UART_SetConfig+0x4e4>)
 800496e:	fba3 2302 	umull	r2, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	011c      	lsls	r4, r3, #4
 8004976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800497a:	2200      	movs	r2, #0
 800497c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004980:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004984:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	1891      	adds	r1, r2, r2
 800498e:	61b9      	str	r1, [r7, #24]
 8004990:	415b      	adcs	r3, r3
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004998:	4641      	mov	r1, r8
 800499a:	1851      	adds	r1, r2, r1
 800499c:	6139      	str	r1, [r7, #16]
 800499e:	4649      	mov	r1, r9
 80049a0:	414b      	adcs	r3, r1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049b0:	4659      	mov	r1, fp
 80049b2:	00cb      	lsls	r3, r1, #3
 80049b4:	4651      	mov	r1, sl
 80049b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ba:	4651      	mov	r1, sl
 80049bc:	00ca      	lsls	r2, r1, #3
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	4642      	mov	r2, r8
 80049c6:	189b      	adds	r3, r3, r2
 80049c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049cc:	464b      	mov	r3, r9
 80049ce:	460a      	mov	r2, r1
 80049d0:	eb42 0303 	adc.w	r3, r2, r3
 80049d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049f0:	4649      	mov	r1, r9
 80049f2:	008b      	lsls	r3, r1, #2
 80049f4:	4641      	mov	r1, r8
 80049f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049fa:	4641      	mov	r1, r8
 80049fc:	008a      	lsls	r2, r1, #2
 80049fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a02:	f7fc f82b 	bl	8000a5c <__aeabi_uldivmod>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	4b38      	ldr	r3, [pc, #224]	@ (8004af0 <UART_SetConfig+0x4e4>)
 8004a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2264      	movs	r2, #100	@ 0x64
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	1acb      	subs	r3, r1, r3
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	3332      	adds	r3, #50	@ 0x32
 8004a20:	4a33      	ldr	r2, [pc, #204]	@ (8004af0 <UART_SetConfig+0x4e4>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a2c:	441c      	add	r4, r3
 8004a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a32:	2200      	movs	r2, #0
 8004a34:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a36:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	1891      	adds	r1, r2, r2
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	415b      	adcs	r3, r3
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a4c:	4641      	mov	r1, r8
 8004a4e:	1851      	adds	r1, r2, r1
 8004a50:	6039      	str	r1, [r7, #0]
 8004a52:	4649      	mov	r1, r9
 8004a54:	414b      	adcs	r3, r1
 8004a56:	607b      	str	r3, [r7, #4]
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a64:	4659      	mov	r1, fp
 8004a66:	00cb      	lsls	r3, r1, #3
 8004a68:	4651      	mov	r1, sl
 8004a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6e:	4651      	mov	r1, sl
 8004a70:	00ca      	lsls	r2, r1, #3
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	4603      	mov	r3, r0
 8004a78:	4642      	mov	r2, r8
 8004a7a:	189b      	adds	r3, r3, r2
 8004a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a7e:	464b      	mov	r3, r9
 8004a80:	460a      	mov	r2, r1
 8004a82:	eb42 0303 	adc.w	r3, r2, r3
 8004a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a92:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	008b      	lsls	r3, r1, #2
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aaa:	4641      	mov	r1, r8
 8004aac:	008a      	lsls	r2, r1, #2
 8004aae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ab2:	f7fb ffd3 	bl	8000a5c <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4b0d      	ldr	r3, [pc, #52]	@ (8004af0 <UART_SetConfig+0x4e4>)
 8004abc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	2164      	movs	r1, #100	@ 0x64
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	3332      	adds	r3, #50	@ 0x32
 8004ace:	4a08      	ldr	r2, [pc, #32]	@ (8004af0 <UART_SetConfig+0x4e4>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	f003 020f 	and.w	r2, r3, #15
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4422      	add	r2, r4
 8004ae2:	609a      	str	r2, [r3, #8]
}
 8004ae4:	bf00      	nop
 8004ae6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004aea:	46bd      	mov	sp, r7
 8004aec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af0:	51eb851f 	.word	0x51eb851f

08004af4 <siprintf>:
 8004af4:	b40e      	push	{r1, r2, r3}
 8004af6:	b500      	push	{lr}
 8004af8:	b09c      	sub	sp, #112	@ 0x70
 8004afa:	ab1d      	add	r3, sp, #116	@ 0x74
 8004afc:	9002      	str	r0, [sp, #8]
 8004afe:	9006      	str	r0, [sp, #24]
 8004b00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b04:	4809      	ldr	r0, [pc, #36]	@ (8004b2c <siprintf+0x38>)
 8004b06:	9107      	str	r1, [sp, #28]
 8004b08:	9104      	str	r1, [sp, #16]
 8004b0a:	4909      	ldr	r1, [pc, #36]	@ (8004b30 <siprintf+0x3c>)
 8004b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b10:	9105      	str	r1, [sp, #20]
 8004b12:	6800      	ldr	r0, [r0, #0]
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	a902      	add	r1, sp, #8
 8004b18:	f000 f994 	bl	8004e44 <_svfiprintf_r>
 8004b1c:	9b02      	ldr	r3, [sp, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	b01c      	add	sp, #112	@ 0x70
 8004b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b28:	b003      	add	sp, #12
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c
 8004b30:	ffff0208 	.word	0xffff0208

08004b34 <memset>:
 8004b34:	4402      	add	r2, r0
 8004b36:	4603      	mov	r3, r0
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d100      	bne.n	8004b3e <memset+0xa>
 8004b3c:	4770      	bx	lr
 8004b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b42:	e7f9      	b.n	8004b38 <memset+0x4>

08004b44 <__errno>:
 8004b44:	4b01      	ldr	r3, [pc, #4]	@ (8004b4c <__errno+0x8>)
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	2000000c 	.word	0x2000000c

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4d0d      	ldr	r5, [pc, #52]	@ (8004b88 <__libc_init_array+0x38>)
 8004b54:	4c0d      	ldr	r4, [pc, #52]	@ (8004b8c <__libc_init_array+0x3c>)
 8004b56:	1b64      	subs	r4, r4, r5
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	4d0b      	ldr	r5, [pc, #44]	@ (8004b90 <__libc_init_array+0x40>)
 8004b62:	4c0c      	ldr	r4, [pc, #48]	@ (8004b94 <__libc_init_array+0x44>)
 8004b64:	f000 fc66 	bl	8005434 <_init>
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	42a6      	cmp	r6, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b78:	4798      	blx	r3
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b82:	4798      	blx	r3
 8004b84:	3601      	adds	r6, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	0800569c 	.word	0x0800569c
 8004b8c:	0800569c 	.word	0x0800569c
 8004b90:	0800569c 	.word	0x0800569c
 8004b94:	080056a0 	.word	0x080056a0

08004b98 <__retarget_lock_acquire_recursive>:
 8004b98:	4770      	bx	lr

08004b9a <__retarget_lock_release_recursive>:
 8004b9a:	4770      	bx	lr

08004b9c <_free_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4605      	mov	r5, r0
 8004ba0:	2900      	cmp	r1, #0
 8004ba2:	d041      	beq.n	8004c28 <_free_r+0x8c>
 8004ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba8:	1f0c      	subs	r4, r1, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	bfb8      	it	lt
 8004bae:	18e4      	addlt	r4, r4, r3
 8004bb0:	f000 f8e0 	bl	8004d74 <__malloc_lock>
 8004bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c2c <_free_r+0x90>)
 8004bb6:	6813      	ldr	r3, [r2, #0]
 8004bb8:	b933      	cbnz	r3, 8004bc8 <_free_r+0x2c>
 8004bba:	6063      	str	r3, [r4, #4]
 8004bbc:	6014      	str	r4, [r2, #0]
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bc4:	f000 b8dc 	b.w	8004d80 <__malloc_unlock>
 8004bc8:	42a3      	cmp	r3, r4
 8004bca:	d908      	bls.n	8004bde <_free_r+0x42>
 8004bcc:	6820      	ldr	r0, [r4, #0]
 8004bce:	1821      	adds	r1, r4, r0
 8004bd0:	428b      	cmp	r3, r1
 8004bd2:	bf01      	itttt	eq
 8004bd4:	6819      	ldreq	r1, [r3, #0]
 8004bd6:	685b      	ldreq	r3, [r3, #4]
 8004bd8:	1809      	addeq	r1, r1, r0
 8004bda:	6021      	streq	r1, [r4, #0]
 8004bdc:	e7ed      	b.n	8004bba <_free_r+0x1e>
 8004bde:	461a      	mov	r2, r3
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	b10b      	cbz	r3, 8004be8 <_free_r+0x4c>
 8004be4:	42a3      	cmp	r3, r4
 8004be6:	d9fa      	bls.n	8004bde <_free_r+0x42>
 8004be8:	6811      	ldr	r1, [r2, #0]
 8004bea:	1850      	adds	r0, r2, r1
 8004bec:	42a0      	cmp	r0, r4
 8004bee:	d10b      	bne.n	8004c08 <_free_r+0x6c>
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	4401      	add	r1, r0
 8004bf4:	1850      	adds	r0, r2, r1
 8004bf6:	4283      	cmp	r3, r0
 8004bf8:	6011      	str	r1, [r2, #0]
 8004bfa:	d1e0      	bne.n	8004bbe <_free_r+0x22>
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	6053      	str	r3, [r2, #4]
 8004c02:	4408      	add	r0, r1
 8004c04:	6010      	str	r0, [r2, #0]
 8004c06:	e7da      	b.n	8004bbe <_free_r+0x22>
 8004c08:	d902      	bls.n	8004c10 <_free_r+0x74>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	602b      	str	r3, [r5, #0]
 8004c0e:	e7d6      	b.n	8004bbe <_free_r+0x22>
 8004c10:	6820      	ldr	r0, [r4, #0]
 8004c12:	1821      	adds	r1, r4, r0
 8004c14:	428b      	cmp	r3, r1
 8004c16:	bf04      	itt	eq
 8004c18:	6819      	ldreq	r1, [r3, #0]
 8004c1a:	685b      	ldreq	r3, [r3, #4]
 8004c1c:	6063      	str	r3, [r4, #4]
 8004c1e:	bf04      	itt	eq
 8004c20:	1809      	addeq	r1, r1, r0
 8004c22:	6021      	streq	r1, [r4, #0]
 8004c24:	6054      	str	r4, [r2, #4]
 8004c26:	e7ca      	b.n	8004bbe <_free_r+0x22>
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000870 	.word	0x20000870

08004c30 <sbrk_aligned>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	4e0f      	ldr	r6, [pc, #60]	@ (8004c70 <sbrk_aligned+0x40>)
 8004c34:	460c      	mov	r4, r1
 8004c36:	6831      	ldr	r1, [r6, #0]
 8004c38:	4605      	mov	r5, r0
 8004c3a:	b911      	cbnz	r1, 8004c42 <sbrk_aligned+0x12>
 8004c3c:	f000 fba6 	bl	800538c <_sbrk_r>
 8004c40:	6030      	str	r0, [r6, #0]
 8004c42:	4621      	mov	r1, r4
 8004c44:	4628      	mov	r0, r5
 8004c46:	f000 fba1 	bl	800538c <_sbrk_r>
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	d103      	bne.n	8004c56 <sbrk_aligned+0x26>
 8004c4e:	f04f 34ff 	mov.w	r4, #4294967295
 8004c52:	4620      	mov	r0, r4
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
 8004c56:	1cc4      	adds	r4, r0, #3
 8004c58:	f024 0403 	bic.w	r4, r4, #3
 8004c5c:	42a0      	cmp	r0, r4
 8004c5e:	d0f8      	beq.n	8004c52 <sbrk_aligned+0x22>
 8004c60:	1a21      	subs	r1, r4, r0
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 fb92 	bl	800538c <_sbrk_r>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d1f2      	bne.n	8004c52 <sbrk_aligned+0x22>
 8004c6c:	e7ef      	b.n	8004c4e <sbrk_aligned+0x1e>
 8004c6e:	bf00      	nop
 8004c70:	2000086c 	.word	0x2000086c

08004c74 <_malloc_r>:
 8004c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c78:	1ccd      	adds	r5, r1, #3
 8004c7a:	f025 0503 	bic.w	r5, r5, #3
 8004c7e:	3508      	adds	r5, #8
 8004c80:	2d0c      	cmp	r5, #12
 8004c82:	bf38      	it	cc
 8004c84:	250c      	movcc	r5, #12
 8004c86:	2d00      	cmp	r5, #0
 8004c88:	4606      	mov	r6, r0
 8004c8a:	db01      	blt.n	8004c90 <_malloc_r+0x1c>
 8004c8c:	42a9      	cmp	r1, r5
 8004c8e:	d904      	bls.n	8004c9a <_malloc_r+0x26>
 8004c90:	230c      	movs	r3, #12
 8004c92:	6033      	str	r3, [r6, #0]
 8004c94:	2000      	movs	r0, #0
 8004c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d70 <_malloc_r+0xfc>
 8004c9e:	f000 f869 	bl	8004d74 <__malloc_lock>
 8004ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca6:	461c      	mov	r4, r3
 8004ca8:	bb44      	cbnz	r4, 8004cfc <_malloc_r+0x88>
 8004caa:	4629      	mov	r1, r5
 8004cac:	4630      	mov	r0, r6
 8004cae:	f7ff ffbf 	bl	8004c30 <sbrk_aligned>
 8004cb2:	1c43      	adds	r3, r0, #1
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	d158      	bne.n	8004d6a <_malloc_r+0xf6>
 8004cb8:	f8d8 4000 	ldr.w	r4, [r8]
 8004cbc:	4627      	mov	r7, r4
 8004cbe:	2f00      	cmp	r7, #0
 8004cc0:	d143      	bne.n	8004d4a <_malloc_r+0xd6>
 8004cc2:	2c00      	cmp	r4, #0
 8004cc4:	d04b      	beq.n	8004d5e <_malloc_r+0xea>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	4639      	mov	r1, r7
 8004cca:	4630      	mov	r0, r6
 8004ccc:	eb04 0903 	add.w	r9, r4, r3
 8004cd0:	f000 fb5c 	bl	800538c <_sbrk_r>
 8004cd4:	4581      	cmp	r9, r0
 8004cd6:	d142      	bne.n	8004d5e <_malloc_r+0xea>
 8004cd8:	6821      	ldr	r1, [r4, #0]
 8004cda:	1a6d      	subs	r5, r5, r1
 8004cdc:	4629      	mov	r1, r5
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7ff ffa6 	bl	8004c30 <sbrk_aligned>
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d03a      	beq.n	8004d5e <_malloc_r+0xea>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	442b      	add	r3, r5
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	f8d8 3000 	ldr.w	r3, [r8]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	bb62      	cbnz	r2, 8004d50 <_malloc_r+0xdc>
 8004cf6:	f8c8 7000 	str.w	r7, [r8]
 8004cfa:	e00f      	b.n	8004d1c <_malloc_r+0xa8>
 8004cfc:	6822      	ldr	r2, [r4, #0]
 8004cfe:	1b52      	subs	r2, r2, r5
 8004d00:	d420      	bmi.n	8004d44 <_malloc_r+0xd0>
 8004d02:	2a0b      	cmp	r2, #11
 8004d04:	d917      	bls.n	8004d36 <_malloc_r+0xc2>
 8004d06:	1961      	adds	r1, r4, r5
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	6025      	str	r5, [r4, #0]
 8004d0c:	bf18      	it	ne
 8004d0e:	6059      	strne	r1, [r3, #4]
 8004d10:	6863      	ldr	r3, [r4, #4]
 8004d12:	bf08      	it	eq
 8004d14:	f8c8 1000 	streq.w	r1, [r8]
 8004d18:	5162      	str	r2, [r4, r5]
 8004d1a:	604b      	str	r3, [r1, #4]
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f000 f82f 	bl	8004d80 <__malloc_unlock>
 8004d22:	f104 000b 	add.w	r0, r4, #11
 8004d26:	1d23      	adds	r3, r4, #4
 8004d28:	f020 0007 	bic.w	r0, r0, #7
 8004d2c:	1ac2      	subs	r2, r0, r3
 8004d2e:	bf1c      	itt	ne
 8004d30:	1a1b      	subne	r3, r3, r0
 8004d32:	50a3      	strne	r3, [r4, r2]
 8004d34:	e7af      	b.n	8004c96 <_malloc_r+0x22>
 8004d36:	6862      	ldr	r2, [r4, #4]
 8004d38:	42a3      	cmp	r3, r4
 8004d3a:	bf0c      	ite	eq
 8004d3c:	f8c8 2000 	streq.w	r2, [r8]
 8004d40:	605a      	strne	r2, [r3, #4]
 8004d42:	e7eb      	b.n	8004d1c <_malloc_r+0xa8>
 8004d44:	4623      	mov	r3, r4
 8004d46:	6864      	ldr	r4, [r4, #4]
 8004d48:	e7ae      	b.n	8004ca8 <_malloc_r+0x34>
 8004d4a:	463c      	mov	r4, r7
 8004d4c:	687f      	ldr	r7, [r7, #4]
 8004d4e:	e7b6      	b.n	8004cbe <_malloc_r+0x4a>
 8004d50:	461a      	mov	r2, r3
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	d1fb      	bne.n	8004d50 <_malloc_r+0xdc>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	6053      	str	r3, [r2, #4]
 8004d5c:	e7de      	b.n	8004d1c <_malloc_r+0xa8>
 8004d5e:	230c      	movs	r3, #12
 8004d60:	6033      	str	r3, [r6, #0]
 8004d62:	4630      	mov	r0, r6
 8004d64:	f000 f80c 	bl	8004d80 <__malloc_unlock>
 8004d68:	e794      	b.n	8004c94 <_malloc_r+0x20>
 8004d6a:	6005      	str	r5, [r0, #0]
 8004d6c:	e7d6      	b.n	8004d1c <_malloc_r+0xa8>
 8004d6e:	bf00      	nop
 8004d70:	20000870 	.word	0x20000870

08004d74 <__malloc_lock>:
 8004d74:	4801      	ldr	r0, [pc, #4]	@ (8004d7c <__malloc_lock+0x8>)
 8004d76:	f7ff bf0f 	b.w	8004b98 <__retarget_lock_acquire_recursive>
 8004d7a:	bf00      	nop
 8004d7c:	20000868 	.word	0x20000868

08004d80 <__malloc_unlock>:
 8004d80:	4801      	ldr	r0, [pc, #4]	@ (8004d88 <__malloc_unlock+0x8>)
 8004d82:	f7ff bf0a 	b.w	8004b9a <__retarget_lock_release_recursive>
 8004d86:	bf00      	nop
 8004d88:	20000868 	.word	0x20000868

08004d8c <__ssputs_r>:
 8004d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d90:	688e      	ldr	r6, [r1, #8]
 8004d92:	461f      	mov	r7, r3
 8004d94:	42be      	cmp	r6, r7
 8004d96:	680b      	ldr	r3, [r1, #0]
 8004d98:	4682      	mov	sl, r0
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	4690      	mov	r8, r2
 8004d9e:	d82d      	bhi.n	8004dfc <__ssputs_r+0x70>
 8004da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004da4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004da8:	d026      	beq.n	8004df8 <__ssputs_r+0x6c>
 8004daa:	6965      	ldr	r5, [r4, #20]
 8004dac:	6909      	ldr	r1, [r1, #16]
 8004dae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004db2:	eba3 0901 	sub.w	r9, r3, r1
 8004db6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dba:	1c7b      	adds	r3, r7, #1
 8004dbc:	444b      	add	r3, r9
 8004dbe:	106d      	asrs	r5, r5, #1
 8004dc0:	429d      	cmp	r5, r3
 8004dc2:	bf38      	it	cc
 8004dc4:	461d      	movcc	r5, r3
 8004dc6:	0553      	lsls	r3, r2, #21
 8004dc8:	d527      	bpl.n	8004e1a <__ssputs_r+0x8e>
 8004dca:	4629      	mov	r1, r5
 8004dcc:	f7ff ff52 	bl	8004c74 <_malloc_r>
 8004dd0:	4606      	mov	r6, r0
 8004dd2:	b360      	cbz	r0, 8004e2e <__ssputs_r+0xa2>
 8004dd4:	6921      	ldr	r1, [r4, #16]
 8004dd6:	464a      	mov	r2, r9
 8004dd8:	f000 fae8 	bl	80053ac <memcpy>
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	6126      	str	r6, [r4, #16]
 8004dea:	6165      	str	r5, [r4, #20]
 8004dec:	444e      	add	r6, r9
 8004dee:	eba5 0509 	sub.w	r5, r5, r9
 8004df2:	6026      	str	r6, [r4, #0]
 8004df4:	60a5      	str	r5, [r4, #8]
 8004df6:	463e      	mov	r6, r7
 8004df8:	42be      	cmp	r6, r7
 8004dfa:	d900      	bls.n	8004dfe <__ssputs_r+0x72>
 8004dfc:	463e      	mov	r6, r7
 8004dfe:	6820      	ldr	r0, [r4, #0]
 8004e00:	4632      	mov	r2, r6
 8004e02:	4641      	mov	r1, r8
 8004e04:	f000 faa8 	bl	8005358 <memmove>
 8004e08:	68a3      	ldr	r3, [r4, #8]
 8004e0a:	1b9b      	subs	r3, r3, r6
 8004e0c:	60a3      	str	r3, [r4, #8]
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	4433      	add	r3, r6
 8004e12:	6023      	str	r3, [r4, #0]
 8004e14:	2000      	movs	r0, #0
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	462a      	mov	r2, r5
 8004e1c:	f000 fad4 	bl	80053c8 <_realloc_r>
 8004e20:	4606      	mov	r6, r0
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d1e0      	bne.n	8004de8 <__ssputs_r+0x5c>
 8004e26:	6921      	ldr	r1, [r4, #16]
 8004e28:	4650      	mov	r0, sl
 8004e2a:	f7ff feb7 	bl	8004b9c <_free_r>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	f8ca 3000 	str.w	r3, [sl]
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e3a:	81a3      	strh	r3, [r4, #12]
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	e7e9      	b.n	8004e16 <__ssputs_r+0x8a>
	...

08004e44 <_svfiprintf_r>:
 8004e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e48:	4698      	mov	r8, r3
 8004e4a:	898b      	ldrh	r3, [r1, #12]
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	b09d      	sub	sp, #116	@ 0x74
 8004e50:	4607      	mov	r7, r0
 8004e52:	460d      	mov	r5, r1
 8004e54:	4614      	mov	r4, r2
 8004e56:	d510      	bpl.n	8004e7a <_svfiprintf_r+0x36>
 8004e58:	690b      	ldr	r3, [r1, #16]
 8004e5a:	b973      	cbnz	r3, 8004e7a <_svfiprintf_r+0x36>
 8004e5c:	2140      	movs	r1, #64	@ 0x40
 8004e5e:	f7ff ff09 	bl	8004c74 <_malloc_r>
 8004e62:	6028      	str	r0, [r5, #0]
 8004e64:	6128      	str	r0, [r5, #16]
 8004e66:	b930      	cbnz	r0, 8004e76 <_svfiprintf_r+0x32>
 8004e68:	230c      	movs	r3, #12
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e70:	b01d      	add	sp, #116	@ 0x74
 8004e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e76:	2340      	movs	r3, #64	@ 0x40
 8004e78:	616b      	str	r3, [r5, #20]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e7e:	2320      	movs	r3, #32
 8004e80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e88:	2330      	movs	r3, #48	@ 0x30
 8004e8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005028 <_svfiprintf_r+0x1e4>
 8004e8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e92:	f04f 0901 	mov.w	r9, #1
 8004e96:	4623      	mov	r3, r4
 8004e98:	469a      	mov	sl, r3
 8004e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e9e:	b10a      	cbz	r2, 8004ea4 <_svfiprintf_r+0x60>
 8004ea0:	2a25      	cmp	r2, #37	@ 0x25
 8004ea2:	d1f9      	bne.n	8004e98 <_svfiprintf_r+0x54>
 8004ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ea8:	d00b      	beq.n	8004ec2 <_svfiprintf_r+0x7e>
 8004eaa:	465b      	mov	r3, fp
 8004eac:	4622      	mov	r2, r4
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f7ff ff6b 	bl	8004d8c <__ssputs_r>
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	f000 80a7 	beq.w	800500a <_svfiprintf_r+0x1c6>
 8004ebc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ebe:	445a      	add	r2, fp
 8004ec0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 809f 	beq.w	800500a <_svfiprintf_r+0x1c6>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ed6:	f10a 0a01 	add.w	sl, sl, #1
 8004eda:	9304      	str	r3, [sp, #16]
 8004edc:	9307      	str	r3, [sp, #28]
 8004ede:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ee2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ee4:	4654      	mov	r4, sl
 8004ee6:	2205      	movs	r2, #5
 8004ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eec:	484e      	ldr	r0, [pc, #312]	@ (8005028 <_svfiprintf_r+0x1e4>)
 8004eee:	f7fb f977 	bl	80001e0 <memchr>
 8004ef2:	9a04      	ldr	r2, [sp, #16]
 8004ef4:	b9d8      	cbnz	r0, 8004f2e <_svfiprintf_r+0xea>
 8004ef6:	06d0      	lsls	r0, r2, #27
 8004ef8:	bf44      	itt	mi
 8004efa:	2320      	movmi	r3, #32
 8004efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f00:	0711      	lsls	r1, r2, #28
 8004f02:	bf44      	itt	mi
 8004f04:	232b      	movmi	r3, #43	@ 0x2b
 8004f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f10:	d015      	beq.n	8004f3e <_svfiprintf_r+0xfa>
 8004f12:	9a07      	ldr	r2, [sp, #28]
 8004f14:	4654      	mov	r4, sl
 8004f16:	2000      	movs	r0, #0
 8004f18:	f04f 0c0a 	mov.w	ip, #10
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f22:	3b30      	subs	r3, #48	@ 0x30
 8004f24:	2b09      	cmp	r3, #9
 8004f26:	d94b      	bls.n	8004fc0 <_svfiprintf_r+0x17c>
 8004f28:	b1b0      	cbz	r0, 8004f58 <_svfiprintf_r+0x114>
 8004f2a:	9207      	str	r2, [sp, #28]
 8004f2c:	e014      	b.n	8004f58 <_svfiprintf_r+0x114>
 8004f2e:	eba0 0308 	sub.w	r3, r0, r8
 8004f32:	fa09 f303 	lsl.w	r3, r9, r3
 8004f36:	4313      	orrs	r3, r2
 8004f38:	9304      	str	r3, [sp, #16]
 8004f3a:	46a2      	mov	sl, r4
 8004f3c:	e7d2      	b.n	8004ee4 <_svfiprintf_r+0xa0>
 8004f3e:	9b03      	ldr	r3, [sp, #12]
 8004f40:	1d19      	adds	r1, r3, #4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	9103      	str	r1, [sp, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bfbb      	ittet	lt
 8004f4a:	425b      	neglt	r3, r3
 8004f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f50:	9307      	strge	r3, [sp, #28]
 8004f52:	9307      	strlt	r3, [sp, #28]
 8004f54:	bfb8      	it	lt
 8004f56:	9204      	strlt	r2, [sp, #16]
 8004f58:	7823      	ldrb	r3, [r4, #0]
 8004f5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f5c:	d10a      	bne.n	8004f74 <_svfiprintf_r+0x130>
 8004f5e:	7863      	ldrb	r3, [r4, #1]
 8004f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f62:	d132      	bne.n	8004fca <_svfiprintf_r+0x186>
 8004f64:	9b03      	ldr	r3, [sp, #12]
 8004f66:	1d1a      	adds	r2, r3, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	9203      	str	r2, [sp, #12]
 8004f6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f70:	3402      	adds	r4, #2
 8004f72:	9305      	str	r3, [sp, #20]
 8004f74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005038 <_svfiprintf_r+0x1f4>
 8004f78:	7821      	ldrb	r1, [r4, #0]
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	4650      	mov	r0, sl
 8004f7e:	f7fb f92f 	bl	80001e0 <memchr>
 8004f82:	b138      	cbz	r0, 8004f94 <_svfiprintf_r+0x150>
 8004f84:	9b04      	ldr	r3, [sp, #16]
 8004f86:	eba0 000a 	sub.w	r0, r0, sl
 8004f8a:	2240      	movs	r2, #64	@ 0x40
 8004f8c:	4082      	lsls	r2, r0
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	3401      	adds	r4, #1
 8004f92:	9304      	str	r3, [sp, #16]
 8004f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f98:	4824      	ldr	r0, [pc, #144]	@ (800502c <_svfiprintf_r+0x1e8>)
 8004f9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f9e:	2206      	movs	r2, #6
 8004fa0:	f7fb f91e 	bl	80001e0 <memchr>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d036      	beq.n	8005016 <_svfiprintf_r+0x1d2>
 8004fa8:	4b21      	ldr	r3, [pc, #132]	@ (8005030 <_svfiprintf_r+0x1ec>)
 8004faa:	bb1b      	cbnz	r3, 8004ff4 <_svfiprintf_r+0x1b0>
 8004fac:	9b03      	ldr	r3, [sp, #12]
 8004fae:	3307      	adds	r3, #7
 8004fb0:	f023 0307 	bic.w	r3, r3, #7
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	9303      	str	r3, [sp, #12]
 8004fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fba:	4433      	add	r3, r6
 8004fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fbe:	e76a      	b.n	8004e96 <_svfiprintf_r+0x52>
 8004fc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	e7a8      	b.n	8004f1c <_svfiprintf_r+0xd8>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	3401      	adds	r4, #1
 8004fce:	9305      	str	r3, [sp, #20]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f04f 0c0a 	mov.w	ip, #10
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fdc:	3a30      	subs	r2, #48	@ 0x30
 8004fde:	2a09      	cmp	r2, #9
 8004fe0:	d903      	bls.n	8004fea <_svfiprintf_r+0x1a6>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0c6      	beq.n	8004f74 <_svfiprintf_r+0x130>
 8004fe6:	9105      	str	r1, [sp, #20]
 8004fe8:	e7c4      	b.n	8004f74 <_svfiprintf_r+0x130>
 8004fea:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fee:	4604      	mov	r4, r0
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e7f0      	b.n	8004fd6 <_svfiprintf_r+0x192>
 8004ff4:	ab03      	add	r3, sp, #12
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	462a      	mov	r2, r5
 8004ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8005034 <_svfiprintf_r+0x1f0>)
 8004ffc:	a904      	add	r1, sp, #16
 8004ffe:	4638      	mov	r0, r7
 8005000:	f3af 8000 	nop.w
 8005004:	1c42      	adds	r2, r0, #1
 8005006:	4606      	mov	r6, r0
 8005008:	d1d6      	bne.n	8004fb8 <_svfiprintf_r+0x174>
 800500a:	89ab      	ldrh	r3, [r5, #12]
 800500c:	065b      	lsls	r3, r3, #25
 800500e:	f53f af2d 	bmi.w	8004e6c <_svfiprintf_r+0x28>
 8005012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005014:	e72c      	b.n	8004e70 <_svfiprintf_r+0x2c>
 8005016:	ab03      	add	r3, sp, #12
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	462a      	mov	r2, r5
 800501c:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <_svfiprintf_r+0x1f0>)
 800501e:	a904      	add	r1, sp, #16
 8005020:	4638      	mov	r0, r7
 8005022:	f000 f879 	bl	8005118 <_printf_i>
 8005026:	e7ed      	b.n	8005004 <_svfiprintf_r+0x1c0>
 8005028:	08005660 	.word	0x08005660
 800502c:	0800566a 	.word	0x0800566a
 8005030:	00000000 	.word	0x00000000
 8005034:	08004d8d 	.word	0x08004d8d
 8005038:	08005666 	.word	0x08005666

0800503c <_printf_common>:
 800503c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005040:	4616      	mov	r6, r2
 8005042:	4698      	mov	r8, r3
 8005044:	688a      	ldr	r2, [r1, #8]
 8005046:	690b      	ldr	r3, [r1, #16]
 8005048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800504c:	4293      	cmp	r3, r2
 800504e:	bfb8      	it	lt
 8005050:	4613      	movlt	r3, r2
 8005052:	6033      	str	r3, [r6, #0]
 8005054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005058:	4607      	mov	r7, r0
 800505a:	460c      	mov	r4, r1
 800505c:	b10a      	cbz	r2, 8005062 <_printf_common+0x26>
 800505e:	3301      	adds	r3, #1
 8005060:	6033      	str	r3, [r6, #0]
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	0699      	lsls	r1, r3, #26
 8005066:	bf42      	ittt	mi
 8005068:	6833      	ldrmi	r3, [r6, #0]
 800506a:	3302      	addmi	r3, #2
 800506c:	6033      	strmi	r3, [r6, #0]
 800506e:	6825      	ldr	r5, [r4, #0]
 8005070:	f015 0506 	ands.w	r5, r5, #6
 8005074:	d106      	bne.n	8005084 <_printf_common+0x48>
 8005076:	f104 0a19 	add.w	sl, r4, #25
 800507a:	68e3      	ldr	r3, [r4, #12]
 800507c:	6832      	ldr	r2, [r6, #0]
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	42ab      	cmp	r3, r5
 8005082:	dc26      	bgt.n	80050d2 <_printf_common+0x96>
 8005084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005088:	6822      	ldr	r2, [r4, #0]
 800508a:	3b00      	subs	r3, #0
 800508c:	bf18      	it	ne
 800508e:	2301      	movne	r3, #1
 8005090:	0692      	lsls	r2, r2, #26
 8005092:	d42b      	bmi.n	80050ec <_printf_common+0xb0>
 8005094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005098:	4641      	mov	r1, r8
 800509a:	4638      	mov	r0, r7
 800509c:	47c8      	blx	r9
 800509e:	3001      	adds	r0, #1
 80050a0:	d01e      	beq.n	80050e0 <_printf_common+0xa4>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	6922      	ldr	r2, [r4, #16]
 80050a6:	f003 0306 	and.w	r3, r3, #6
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	bf02      	ittt	eq
 80050ae:	68e5      	ldreq	r5, [r4, #12]
 80050b0:	6833      	ldreq	r3, [r6, #0]
 80050b2:	1aed      	subeq	r5, r5, r3
 80050b4:	68a3      	ldr	r3, [r4, #8]
 80050b6:	bf0c      	ite	eq
 80050b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050bc:	2500      	movne	r5, #0
 80050be:	4293      	cmp	r3, r2
 80050c0:	bfc4      	itt	gt
 80050c2:	1a9b      	subgt	r3, r3, r2
 80050c4:	18ed      	addgt	r5, r5, r3
 80050c6:	2600      	movs	r6, #0
 80050c8:	341a      	adds	r4, #26
 80050ca:	42b5      	cmp	r5, r6
 80050cc:	d11a      	bne.n	8005104 <_printf_common+0xc8>
 80050ce:	2000      	movs	r0, #0
 80050d0:	e008      	b.n	80050e4 <_printf_common+0xa8>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4652      	mov	r2, sl
 80050d6:	4641      	mov	r1, r8
 80050d8:	4638      	mov	r0, r7
 80050da:	47c8      	blx	r9
 80050dc:	3001      	adds	r0, #1
 80050de:	d103      	bne.n	80050e8 <_printf_common+0xac>
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e8:	3501      	adds	r5, #1
 80050ea:	e7c6      	b.n	800507a <_printf_common+0x3e>
 80050ec:	18e1      	adds	r1, r4, r3
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	2030      	movs	r0, #48	@ 0x30
 80050f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050f6:	4422      	add	r2, r4
 80050f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005100:	3302      	adds	r3, #2
 8005102:	e7c7      	b.n	8005094 <_printf_common+0x58>
 8005104:	2301      	movs	r3, #1
 8005106:	4622      	mov	r2, r4
 8005108:	4641      	mov	r1, r8
 800510a:	4638      	mov	r0, r7
 800510c:	47c8      	blx	r9
 800510e:	3001      	adds	r0, #1
 8005110:	d0e6      	beq.n	80050e0 <_printf_common+0xa4>
 8005112:	3601      	adds	r6, #1
 8005114:	e7d9      	b.n	80050ca <_printf_common+0x8e>
	...

08005118 <_printf_i>:
 8005118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800511c:	7e0f      	ldrb	r7, [r1, #24]
 800511e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005120:	2f78      	cmp	r7, #120	@ 0x78
 8005122:	4691      	mov	r9, r2
 8005124:	4680      	mov	r8, r0
 8005126:	460c      	mov	r4, r1
 8005128:	469a      	mov	sl, r3
 800512a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800512e:	d807      	bhi.n	8005140 <_printf_i+0x28>
 8005130:	2f62      	cmp	r7, #98	@ 0x62
 8005132:	d80a      	bhi.n	800514a <_printf_i+0x32>
 8005134:	2f00      	cmp	r7, #0
 8005136:	f000 80d2 	beq.w	80052de <_printf_i+0x1c6>
 800513a:	2f58      	cmp	r7, #88	@ 0x58
 800513c:	f000 80b9 	beq.w	80052b2 <_printf_i+0x19a>
 8005140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005148:	e03a      	b.n	80051c0 <_printf_i+0xa8>
 800514a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800514e:	2b15      	cmp	r3, #21
 8005150:	d8f6      	bhi.n	8005140 <_printf_i+0x28>
 8005152:	a101      	add	r1, pc, #4	@ (adr r1, 8005158 <_printf_i+0x40>)
 8005154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005158:	080051b1 	.word	0x080051b1
 800515c:	080051c5 	.word	0x080051c5
 8005160:	08005141 	.word	0x08005141
 8005164:	08005141 	.word	0x08005141
 8005168:	08005141 	.word	0x08005141
 800516c:	08005141 	.word	0x08005141
 8005170:	080051c5 	.word	0x080051c5
 8005174:	08005141 	.word	0x08005141
 8005178:	08005141 	.word	0x08005141
 800517c:	08005141 	.word	0x08005141
 8005180:	08005141 	.word	0x08005141
 8005184:	080052c5 	.word	0x080052c5
 8005188:	080051ef 	.word	0x080051ef
 800518c:	0800527f 	.word	0x0800527f
 8005190:	08005141 	.word	0x08005141
 8005194:	08005141 	.word	0x08005141
 8005198:	080052e7 	.word	0x080052e7
 800519c:	08005141 	.word	0x08005141
 80051a0:	080051ef 	.word	0x080051ef
 80051a4:	08005141 	.word	0x08005141
 80051a8:	08005141 	.word	0x08005141
 80051ac:	08005287 	.word	0x08005287
 80051b0:	6833      	ldr	r3, [r6, #0]
 80051b2:	1d1a      	adds	r2, r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6032      	str	r2, [r6, #0]
 80051b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051c0:	2301      	movs	r3, #1
 80051c2:	e09d      	b.n	8005300 <_printf_i+0x1e8>
 80051c4:	6833      	ldr	r3, [r6, #0]
 80051c6:	6820      	ldr	r0, [r4, #0]
 80051c8:	1d19      	adds	r1, r3, #4
 80051ca:	6031      	str	r1, [r6, #0]
 80051cc:	0606      	lsls	r6, r0, #24
 80051ce:	d501      	bpl.n	80051d4 <_printf_i+0xbc>
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	e003      	b.n	80051dc <_printf_i+0xc4>
 80051d4:	0645      	lsls	r5, r0, #25
 80051d6:	d5fb      	bpl.n	80051d0 <_printf_i+0xb8>
 80051d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051dc:	2d00      	cmp	r5, #0
 80051de:	da03      	bge.n	80051e8 <_printf_i+0xd0>
 80051e0:	232d      	movs	r3, #45	@ 0x2d
 80051e2:	426d      	negs	r5, r5
 80051e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051e8:	4859      	ldr	r0, [pc, #356]	@ (8005350 <_printf_i+0x238>)
 80051ea:	230a      	movs	r3, #10
 80051ec:	e011      	b.n	8005212 <_printf_i+0xfa>
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	0608      	lsls	r0, r1, #24
 80051f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80051f8:	d402      	bmi.n	8005200 <_printf_i+0xe8>
 80051fa:	0649      	lsls	r1, r1, #25
 80051fc:	bf48      	it	mi
 80051fe:	b2ad      	uxthmi	r5, r5
 8005200:	2f6f      	cmp	r7, #111	@ 0x6f
 8005202:	4853      	ldr	r0, [pc, #332]	@ (8005350 <_printf_i+0x238>)
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	bf14      	ite	ne
 8005208:	230a      	movne	r3, #10
 800520a:	2308      	moveq	r3, #8
 800520c:	2100      	movs	r1, #0
 800520e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005212:	6866      	ldr	r6, [r4, #4]
 8005214:	60a6      	str	r6, [r4, #8]
 8005216:	2e00      	cmp	r6, #0
 8005218:	bfa2      	ittt	ge
 800521a:	6821      	ldrge	r1, [r4, #0]
 800521c:	f021 0104 	bicge.w	r1, r1, #4
 8005220:	6021      	strge	r1, [r4, #0]
 8005222:	b90d      	cbnz	r5, 8005228 <_printf_i+0x110>
 8005224:	2e00      	cmp	r6, #0
 8005226:	d04b      	beq.n	80052c0 <_printf_i+0x1a8>
 8005228:	4616      	mov	r6, r2
 800522a:	fbb5 f1f3 	udiv	r1, r5, r3
 800522e:	fb03 5711 	mls	r7, r3, r1, r5
 8005232:	5dc7      	ldrb	r7, [r0, r7]
 8005234:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005238:	462f      	mov	r7, r5
 800523a:	42bb      	cmp	r3, r7
 800523c:	460d      	mov	r5, r1
 800523e:	d9f4      	bls.n	800522a <_printf_i+0x112>
 8005240:	2b08      	cmp	r3, #8
 8005242:	d10b      	bne.n	800525c <_printf_i+0x144>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	07df      	lsls	r7, r3, #31
 8005248:	d508      	bpl.n	800525c <_printf_i+0x144>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	6861      	ldr	r1, [r4, #4]
 800524e:	4299      	cmp	r1, r3
 8005250:	bfde      	ittt	le
 8005252:	2330      	movle	r3, #48	@ 0x30
 8005254:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005258:	f106 36ff 	addle.w	r6, r6, #4294967295
 800525c:	1b92      	subs	r2, r2, r6
 800525e:	6122      	str	r2, [r4, #16]
 8005260:	f8cd a000 	str.w	sl, [sp]
 8005264:	464b      	mov	r3, r9
 8005266:	aa03      	add	r2, sp, #12
 8005268:	4621      	mov	r1, r4
 800526a:	4640      	mov	r0, r8
 800526c:	f7ff fee6 	bl	800503c <_printf_common>
 8005270:	3001      	adds	r0, #1
 8005272:	d14a      	bne.n	800530a <_printf_i+0x1f2>
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	b004      	add	sp, #16
 800527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	4833      	ldr	r0, [pc, #204]	@ (8005354 <_printf_i+0x23c>)
 8005288:	2778      	movs	r7, #120	@ 0x78
 800528a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	6831      	ldr	r1, [r6, #0]
 8005292:	061f      	lsls	r7, r3, #24
 8005294:	f851 5b04 	ldr.w	r5, [r1], #4
 8005298:	d402      	bmi.n	80052a0 <_printf_i+0x188>
 800529a:	065f      	lsls	r7, r3, #25
 800529c:	bf48      	it	mi
 800529e:	b2ad      	uxthmi	r5, r5
 80052a0:	6031      	str	r1, [r6, #0]
 80052a2:	07d9      	lsls	r1, r3, #31
 80052a4:	bf44      	itt	mi
 80052a6:	f043 0320 	orrmi.w	r3, r3, #32
 80052aa:	6023      	strmi	r3, [r4, #0]
 80052ac:	b11d      	cbz	r5, 80052b6 <_printf_i+0x19e>
 80052ae:	2310      	movs	r3, #16
 80052b0:	e7ac      	b.n	800520c <_printf_i+0xf4>
 80052b2:	4827      	ldr	r0, [pc, #156]	@ (8005350 <_printf_i+0x238>)
 80052b4:	e7e9      	b.n	800528a <_printf_i+0x172>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	f023 0320 	bic.w	r3, r3, #32
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	e7f6      	b.n	80052ae <_printf_i+0x196>
 80052c0:	4616      	mov	r6, r2
 80052c2:	e7bd      	b.n	8005240 <_printf_i+0x128>
 80052c4:	6833      	ldr	r3, [r6, #0]
 80052c6:	6825      	ldr	r5, [r4, #0]
 80052c8:	6961      	ldr	r1, [r4, #20]
 80052ca:	1d18      	adds	r0, r3, #4
 80052cc:	6030      	str	r0, [r6, #0]
 80052ce:	062e      	lsls	r6, r5, #24
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	d501      	bpl.n	80052d8 <_printf_i+0x1c0>
 80052d4:	6019      	str	r1, [r3, #0]
 80052d6:	e002      	b.n	80052de <_printf_i+0x1c6>
 80052d8:	0668      	lsls	r0, r5, #25
 80052da:	d5fb      	bpl.n	80052d4 <_printf_i+0x1bc>
 80052dc:	8019      	strh	r1, [r3, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	4616      	mov	r6, r2
 80052e4:	e7bc      	b.n	8005260 <_printf_i+0x148>
 80052e6:	6833      	ldr	r3, [r6, #0]
 80052e8:	1d1a      	adds	r2, r3, #4
 80052ea:	6032      	str	r2, [r6, #0]
 80052ec:	681e      	ldr	r6, [r3, #0]
 80052ee:	6862      	ldr	r2, [r4, #4]
 80052f0:	2100      	movs	r1, #0
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7fa ff74 	bl	80001e0 <memchr>
 80052f8:	b108      	cbz	r0, 80052fe <_printf_i+0x1e6>
 80052fa:	1b80      	subs	r0, r0, r6
 80052fc:	6060      	str	r0, [r4, #4]
 80052fe:	6863      	ldr	r3, [r4, #4]
 8005300:	6123      	str	r3, [r4, #16]
 8005302:	2300      	movs	r3, #0
 8005304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005308:	e7aa      	b.n	8005260 <_printf_i+0x148>
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	4632      	mov	r2, r6
 800530e:	4649      	mov	r1, r9
 8005310:	4640      	mov	r0, r8
 8005312:	47d0      	blx	sl
 8005314:	3001      	adds	r0, #1
 8005316:	d0ad      	beq.n	8005274 <_printf_i+0x15c>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	079b      	lsls	r3, r3, #30
 800531c:	d413      	bmi.n	8005346 <_printf_i+0x22e>
 800531e:	68e0      	ldr	r0, [r4, #12]
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	4298      	cmp	r0, r3
 8005324:	bfb8      	it	lt
 8005326:	4618      	movlt	r0, r3
 8005328:	e7a6      	b.n	8005278 <_printf_i+0x160>
 800532a:	2301      	movs	r3, #1
 800532c:	4632      	mov	r2, r6
 800532e:	4649      	mov	r1, r9
 8005330:	4640      	mov	r0, r8
 8005332:	47d0      	blx	sl
 8005334:	3001      	adds	r0, #1
 8005336:	d09d      	beq.n	8005274 <_printf_i+0x15c>
 8005338:	3501      	adds	r5, #1
 800533a:	68e3      	ldr	r3, [r4, #12]
 800533c:	9903      	ldr	r1, [sp, #12]
 800533e:	1a5b      	subs	r3, r3, r1
 8005340:	42ab      	cmp	r3, r5
 8005342:	dcf2      	bgt.n	800532a <_printf_i+0x212>
 8005344:	e7eb      	b.n	800531e <_printf_i+0x206>
 8005346:	2500      	movs	r5, #0
 8005348:	f104 0619 	add.w	r6, r4, #25
 800534c:	e7f5      	b.n	800533a <_printf_i+0x222>
 800534e:	bf00      	nop
 8005350:	08005671 	.word	0x08005671
 8005354:	08005682 	.word	0x08005682

08005358 <memmove>:
 8005358:	4288      	cmp	r0, r1
 800535a:	b510      	push	{r4, lr}
 800535c:	eb01 0402 	add.w	r4, r1, r2
 8005360:	d902      	bls.n	8005368 <memmove+0x10>
 8005362:	4284      	cmp	r4, r0
 8005364:	4623      	mov	r3, r4
 8005366:	d807      	bhi.n	8005378 <memmove+0x20>
 8005368:	1e43      	subs	r3, r0, #1
 800536a:	42a1      	cmp	r1, r4
 800536c:	d008      	beq.n	8005380 <memmove+0x28>
 800536e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005376:	e7f8      	b.n	800536a <memmove+0x12>
 8005378:	4402      	add	r2, r0
 800537a:	4601      	mov	r1, r0
 800537c:	428a      	cmp	r2, r1
 800537e:	d100      	bne.n	8005382 <memmove+0x2a>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800538a:	e7f7      	b.n	800537c <memmove+0x24>

0800538c <_sbrk_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4d06      	ldr	r5, [pc, #24]	@ (80053a8 <_sbrk_r+0x1c>)
 8005390:	2300      	movs	r3, #0
 8005392:	4604      	mov	r4, r0
 8005394:	4608      	mov	r0, r1
 8005396:	602b      	str	r3, [r5, #0]
 8005398:	f7fc fc2c 	bl	8001bf4 <_sbrk>
 800539c:	1c43      	adds	r3, r0, #1
 800539e:	d102      	bne.n	80053a6 <_sbrk_r+0x1a>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	b103      	cbz	r3, 80053a6 <_sbrk_r+0x1a>
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	20000864 	.word	0x20000864

080053ac <memcpy>:
 80053ac:	440a      	add	r2, r1
 80053ae:	4291      	cmp	r1, r2
 80053b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053b4:	d100      	bne.n	80053b8 <memcpy+0xc>
 80053b6:	4770      	bx	lr
 80053b8:	b510      	push	{r4, lr}
 80053ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c2:	4291      	cmp	r1, r2
 80053c4:	d1f9      	bne.n	80053ba <memcpy+0xe>
 80053c6:	bd10      	pop	{r4, pc}

080053c8 <_realloc_r>:
 80053c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053cc:	4680      	mov	r8, r0
 80053ce:	4615      	mov	r5, r2
 80053d0:	460c      	mov	r4, r1
 80053d2:	b921      	cbnz	r1, 80053de <_realloc_r+0x16>
 80053d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053d8:	4611      	mov	r1, r2
 80053da:	f7ff bc4b 	b.w	8004c74 <_malloc_r>
 80053de:	b92a      	cbnz	r2, 80053ec <_realloc_r+0x24>
 80053e0:	f7ff fbdc 	bl	8004b9c <_free_r>
 80053e4:	2400      	movs	r4, #0
 80053e6:	4620      	mov	r0, r4
 80053e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ec:	f000 f81a 	bl	8005424 <_malloc_usable_size_r>
 80053f0:	4285      	cmp	r5, r0
 80053f2:	4606      	mov	r6, r0
 80053f4:	d802      	bhi.n	80053fc <_realloc_r+0x34>
 80053f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80053fa:	d8f4      	bhi.n	80053e6 <_realloc_r+0x1e>
 80053fc:	4629      	mov	r1, r5
 80053fe:	4640      	mov	r0, r8
 8005400:	f7ff fc38 	bl	8004c74 <_malloc_r>
 8005404:	4607      	mov	r7, r0
 8005406:	2800      	cmp	r0, #0
 8005408:	d0ec      	beq.n	80053e4 <_realloc_r+0x1c>
 800540a:	42b5      	cmp	r5, r6
 800540c:	462a      	mov	r2, r5
 800540e:	4621      	mov	r1, r4
 8005410:	bf28      	it	cs
 8005412:	4632      	movcs	r2, r6
 8005414:	f7ff ffca 	bl	80053ac <memcpy>
 8005418:	4621      	mov	r1, r4
 800541a:	4640      	mov	r0, r8
 800541c:	f7ff fbbe 	bl	8004b9c <_free_r>
 8005420:	463c      	mov	r4, r7
 8005422:	e7e0      	b.n	80053e6 <_realloc_r+0x1e>

08005424 <_malloc_usable_size_r>:
 8005424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005428:	1f18      	subs	r0, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	bfbc      	itt	lt
 800542e:	580b      	ldrlt	r3, [r1, r0]
 8005430:	18c0      	addlt	r0, r0, r3
 8005432:	4770      	bx	lr

08005434 <_init>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	bf00      	nop
 8005438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543a:	bc08      	pop	{r3}
 800543c:	469e      	mov	lr, r3
 800543e:	4770      	bx	lr

08005440 <_fini>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr
